<!--
name: understanding-es6
version : "0.1"
title : "Understanding ECMAScript 6"
description: "This book is aimed at intermediate-to-advanced JavaScript developers"
license : "CC BY-NC-ND"
-->


<!-- @section -->

# Table of Contents

*   [Introduction](#leanpub-auto-introduction)
    *   [Browser and Node.js Compatibility](#leanpub-auto-browser-and-nodejs-compatibility)
    *   [Who This Book is For](#leanpub-auto-who-this-book-is-for)
    *   [Overview](#leanpub-auto-overview)
    *   [Help and Support](#leanpub-auto-help-and-support)
*   [The Basics](#leanpub-auto-the-basics)
    *   [Better Unicode Support](#leanpub-auto-better-unicode-support)
    *   [Other String Changes](#leanpub-auto-other-string-changes)
    *   [Other Regular Expression Changes](#leanpub-auto-other-regular-expression-changes)
    *   [Object.is()](#leanpub-auto-objectis)
    *   [Block bindings](#leanpub-auto-block-bindings)
    *   [Destructuring Assignment](#leanpub-auto-destructuring-assignment)
    *   [Numbers](#leanpub-auto-numbers)
    *   [Summary](#leanpub-auto-summary)
*   [Functions](#leanpub-auto-functions)
    *   [Default Parameters](#leanpub-auto-default-parameters)
    *   [Rest Parameters](#leanpub-auto-rest-parameters)
    *   [Destructured Parameters](#leanpub-auto-destructured-parameters)
    *   [The Spread Operator](#leanpub-auto-the-spread-operator)
    *   [The name Property](#leanpub-auto-the-name-property)
    *   [new.target, [[Call]], and [[Construct]]](#leanpub-auto-newtarget-call-and-construct)
    *   [Block-Level Functions](#leanpub-auto-block-level-functions)
    *   [Arrow Functions](#leanpub-auto-arrow-functions)
    *   [Syntax](#leanpub-auto-syntax)
    *   [Summary](#leanpub-auto-summary-1)
*   [Objects](#leanpub-auto-objects)
    *   [Object Categories](#leanpub-auto-object-categories)
    *   [Object Literal Extensions](#leanpub-auto-object-literal-extensions)
    *   [Object.assign()](#leanpub-auto-objectassign)
    *   [Duplicate Object Literal Properties](#leanpub-auto-duplicate-object-literal-properties)
    *   [Changing Prototypes](#leanpub-auto-changing-prototypes)
    *   [Super References](#leanpub-auto-super-references)
    *   [Summary](#leanpub-auto-summary-2)
*   [Symbols](#leanpub-auto-symbols)
    *   [Creating Symbols](#leanpub-auto-creating-symbols)
    *   [Identifying Symbols](#leanpub-auto-identifying-symbols)
    *   [Using Symbols](#leanpub-auto-using-symbols)
    *   [Sharing Symbols](#leanpub-auto-sharing-symbols)
    *   [Finding Object Symbols](#leanpub-auto-finding-object-symbols)
    *   [Coercing Symbols to Strings](#leanpub-auto-coercing-symbols-to-strings)
    *   [Well-Known Symbols](#leanpub-auto-well-known-symbols)
    *   [Summary](#leanpub-auto-summary-3)
*   [Classes](#leanpub-auto-classes)
    *   [Class-Like Structures in ECMAScript 5](#leanpub-auto-class-like-structures-in-ecmascript-5)
    *   [Class Declarations](#leanpub-auto-class-declarations)
    *   [Class Expressions](#leanpub-auto-class-expressions)
    *   [Accessor Properties](#leanpub-auto-accessor-properties)
    *   [Static Members](#leanpub-auto-static-members)
    *   [Derived Classes](#leanpub-auto-derived-classes)
    *   [Summary](#leanpub-auto-summary-4)
*   [Iterators and Generators](#leanpub-auto-iterators-and-generators)
    *   [What are Iterators?](#leanpub-auto-what-are-iterators)
    *   [Generators](#leanpub-auto-generators)
    *   [Iterables and for-of](#leanpub-auto-iterables-and-for-of)
    *   [Built-in Iterators](#leanpub-auto-built-in-iterators)
    *   [Advanced Functionality](#leanpub-auto-advanced-functionality)
    *   [Summary](#leanpub-auto-summary-5)
*   [Template Strings](#leanpub-auto-template-strings)
    *   [Basic Syntax](#leanpub-auto-basic-syntax)
    *   [Multiline Strings](#leanpub-auto-multiline-strings)
    *   [Substitutions](#leanpub-auto-substitutions)
    *   [Tagged Templates](#leanpub-auto-tagged-templates)
    *   [Summary](#leanpub-auto-summary-6)



## Introduction

The JavaScript core language features are defined in a standard called ECMA-262\. The language defined in this standard is called ECMAScript, of which the JavaScript in the browser and Node.js environments are a superset. While browsers and Node.js may add more capabilities through additional objects and methods, the core of the language remains as defined in ECMAScript, which is why the ongoing development of ECMA-262 is vital to the success of JavaScript as a whole.

In 2007, JavaScript was at a crossroads. The popularity of Ajax was ushering in a new age of dynamic web applications while JavaScript hadn’t changed since the third edition of ECMA-262 was published in 1999\. TC-39, the committee responsible for driving the ECMAScript process, put together a large draft specification for ECMAScript 4\. ECMAScript 4 was massive in scope, introducing changes both small and large to the language. Language features included new syntax, modules, classes, classical inheritance, private object members, optional type annotations, and more.

The scope of the ECMAScript 4 changes caused a rift to form in TC-39, with some members feeling that the fourth edition was trying to accomplish too much. A group of leaders from Yahoo, Google, and Microsoft came up with an alternate proposal for the next version of ECMAScript that they initially called ECMAScript 3.1\. The “3.1” was intended to show that this was an incremental change to the existing standard.

ECMAScript 3.1 introduced very few syntax changes, instead focusing on property attributes, native JSON support, and adding methods to already-existing objects. Although there was an early attempt to reconcile ECMAScript 3.1 and ECMAScript 4, this ultimately failed as the two camps had difficulty with the very different perspectives on how the language should grow.

In 2008, Brendan Eich, the creator of JavaScript, announced that TC-39 would focus its efforts on standardizing ECMAScript 3.1\. They would table the major syntax and feature changes of ECMAScript 4 until after the next version of ECMAScript was standardized, and all members of the committee would work to bring the best pieces of ECMAScript 3.1 and 4 together after that point into an effort initially nicknamed ECMAScript Harmony.

ECMAScript 3.1 was eventually standardized as the fifth edition of ECMA-262, also described as ECMAScript 5\. The committee never released an ECMAScript 4 standard to avoid confusion with the now-defunct effort of the same name. Work then began on ECMAScript Harmony, with ECMAScript 6 being the first standard released in this new “harmonious” spirit.

ECMAScript 6 reached feature complete status in 2014\. The features vary widely from completely new objects and patterns to syntax changes to new methods on existing objects. The exciting thing about ECMAScript 6 is that all of these changes are geared towards problems that developers are actually facing. And while it will still take time for adoption and implementation to reach the point where ECMAScript 6 is the minimum that developers can expect, there’s a lot to be gained from a good understanding of what the future of JavaScript looks like.

### Browser and Node.js Compatibility

Many JavaScript environments, such as web browsers and Node.js, are actively working on implementing ECMAScript 6\. This book does not attempt to address the inconsistencies between implementations and instead focuses on what the specification defines as the correct behavior. As such, it’s possible that your JavaScript environment may not conform to the behavior described in this book.

### Who This Book is For

This book is intended as a guide for those who are already familiar with JavaScript and ECMAScript 5\. While a deep understanding of the language isn’t necessary to use this book, it is helpful in understanding the differences between ECMAScript 5 and 6\. In particular, this book is aimed at intermediate-to-advanced JavaScript developers (both browser and Node.js environments) who want to learn about the future of the language.

This book is not for beginners who have never written JavaScript. You will need to have a good basic understanding of the language to make use of this book.

### Overview

**Chapter 1: The Basics** introduces the smallest changes in the language. These are the new features that don’t necessarily introduce syntax changes, but rather are incremental changes on top of ECMAScript 5.

**Chapter 2: Functions** discusses the various changes to functions. This includes the arrow function form, default parameters, rest parameters, and more.

**Chapter 3: Objects** explains the changes to how objects are created, modified, and used. Topics include changes to object literal syntax, and new reflection methods.

**Chapter 4: Symbols** introduces the concept of symbols, a new way to define properties. Symbols are a new primitive type that can be used to obscure (but not hide) object properties and methods.

**Chapter 5: Arrays** details the changes to native arrays and the interesting new ways they can be used in JavaScript.

**Chapter 6: Collections** details the new collection types of `Set`, `WeakSet`, `Map`, and `WeakMap`. These types expand on the usefulness of arrays by adding semantics, de-duping, and memory management designed specifically for JavaScript.

**Chapter 7: Classes** introduces the first formal concept of classes in JavaScript. Often a point of confusion for those coming from other languages, the addition of class syntax in JavaScript makes the language more approachable to others and more concise for enthusiasts.

**Chapter 8: Iterators and Generators** discusses the addition of iterators and generators to the language. These features allow you to work with collections of data in powerful ways that were not possible in previous versions of JavaScript.

**Chapter 9: Proxies** discusses the new proxy object that allows you to intercept every operation performed on an object. Proxies give developers unprecedented control over objects and, as such, unlimited possibilities for defining new interaction patterns.

**Chapter 10: Promises** introduces promises as a new part of the language. Promises were a grassroots effort that eventually took off and gained in popularity due to extensive library support. ECMAScript 6 formalizes promises and makes them available by default.

**Chapter 11: Modules** details the official module format for JavaScript. The intent is that these modules can replace the numerous ad-hoc module definition formats that have appeared over the years.

**Chapter 12: Template Strings** discusses the new built-in templating functionality. Template strings are designed to easily create DSLs in a secure way.

**Chapter 13: Reflection** introduces the formalized reflection API for JavaScript. Similar to other languages, ECMAScript 6 reflection allows you to inspect objects at a granular level, even if you didn’t create the object.

### Help and Support

You can file issues, suggest changes, and open pull requests against this book by visiting: [https://github.com/nzakas/understandinges6](https://github.com/nzakas/understandinges6)

For anything else, please send a message to the mailing list: [http://groups.google.com/group/zakasbooks](http://groups.google.com/group/zakasbooks).

## The Basics

ECMAScript 6 makes a large number of changes on top of ECMAScript 5\. Some of the changes are larger, such as adding new types or syntax, while others are quite small, providing incremental improvements on top of the language. This chapter covers those incremental improvements that likely won’t gain a lot of attention but provide some important functionality that may make certain types of problems easier to solve.

### Better Unicode Support

Prior to ECMAScript 6, JavaScript strings were based solely on the idea of 16-bit character encodings. All string properties and methods, such as `length` and `charAt()`, were based around the idea that every 16-bit sequence represented a single character. ECMAScript 5 allowed JavaScript engines to decide which of two encodings to use, either UCS-2 or UTF-16 (both encodings use 16-bit _code units_, making all observable operations the same). While it’s true that all of the world’s characters used to fit into 16 bits at one point in time, that is no longer the case.

Keeping within 16 bits wasn’t possible for Unicode’s stated goal of providing a globally unique identifier to every character in the world. These globally unique identifiers, called _code points_, are simply numbers starting at 0 (you might think of these as character codes, though there is a subtle difference). A character encoding is responsible for encoding a code point into code units that are internally consistent. While UCS-2 had a one-to-one mapping of code point to code unit, UTF-16 is more variable.

The first 2^16 code points are represented as single 16-bit code units in UTF-16\. This is called the _Basic Multilingual Plane_ (BMP). Everything beyond that range is considered to be in a _supplementary plane_, where the code points can no longer be represented in just 16-bits. UTF-16 solves this problem by introducing _surrogate pairs_ in which a single code point is represented by two 16-bit code units. That means any single character in a string can be either one code unit (for BMP, total of 16 bits) or two (for supplementary plane characters, total of 32 bits).

ECMAScript 5 kept all operations as working on 16-bit code units, meaning that you could get unexpected results from strings containing surrogate pairs. For example:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

In this example, a single Unicode character is represented using surrogate pairs, and as such, the JavaScript string operations treat the string as having two 16-bit characters. That means `length` is 2, a regular expression trying to match a single character fails, and `charAt()` is unable to return a valid character string. The `charCodeAt()` method returns the appropriate 16-bit number for each code unit, but that is the closest you could get to the real value in ECMAScript 5.

ECMAScript 6 enforces encoding of strings in UTF-16\. Standardizing on this character encoding means that the language can now support functionality designed to work specifically with surrogate pairs.

#### The codePointAt() Method

The first example of fully supporting UTF-16 is the `codePointAt()` method, which can be used to retrieve the Unicode code point that maps to a given position in a string. This method accepts the code unit position (not the character position) and returns an integer value:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

The `codePointAt()` method works in the same manner as `charCodeAt()` except for non-BMP characters. The first character in `text` is non-BMP and is therefore comprised of two code units, meaning the entire length of the string is 3 rather than 2\. The `charCodeAt()` method returns only the first code unit for position 0 whereas `codePointAt()` returns the full code point even though it spans multiple code units. Both methods return the same value for positions 1 (the second code unit of the first character) and 2 (the `"a"`).

This method is the easiest way to determine if a given character is represented by one or two code points:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

The upper bound of 16-bit characters is represented in hexadecimal as `FFFF`, so any code point above that number must be represented by two code units.

#### String.fromCodePoint()

When ECMAScript provides a way to do something, it also tends to provide a way to do the reverse. You can use `codePointAt()` to retrieve the code point for a character in a string, while `String.fromCodePoint()` produces a single-character string for the given code point. For example:

<div class="code-block">

<div class="highlight">

    console

</div>

</div>

You can think of `String.fromCodePoint()` as a more complete version of `String.fromCharCode()`. Each method has the same result for all characters in the BMP; the only difference is with characters outside of that range.

#### Escaping Non-BMP Characters

ECMAScript 5 allows strings to contain 16-bit Unicode characters represented by an _escape sequence_. The escape sequence is the `\u` followed by four hexadecimal values. For example, the escape sequence `\u0061` represents the letter `"a"`:

<div class="code-block">

<div class="highlight">

    console

</div>

</div>

If you try to use an escape sequence with a number past `FFFF`, the upper bound of the BMP, then you can get some surprising results:

<div class="code-block">

<div class="highlight">

    console

</div>

</div>

Since Unicode escape sequences were defined as always having exactly four hexadecimal characters, ECMAScript evaluates `\u20BB7` as two characters: `\u20BB` and `"7"`. The first character is unprintable and the second is the number 7.

ECMAScript 6 solves this problem by introducing an extended Unicode escape sequence where the hexadecimal numbers are contained within curly braces. This allows any number of hexadecimal characters to specify a single character:

<div class="code-block">

<div class="highlight">

    console

</div>

</div>

Using the extended escape sequence, the correct character is contained in the string.

<table class="warning sidebarish">

<tbody>

<tr>

<td class="sidebar-icon">![warning](/site_images/understandinges6/leanpub_warning.png)</td>

<td>

Make sure that you use this new escape sequence only in an ECMAScript 6 environment. In all other environments, doing so causes a syntax error. You may want to check and see if the environment supports the extended escape sequence using a function such as:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

</td>

</tr>

</tbody>

</table>

#### The normalize() Method

Another interesting aspect of Unicode is that different characters may be considered equivalent for the purposes of sorting or other comparison-based operations. There are two ways to define these relationships. First, _canonical equivalence_ means that two sequences of code points are considered interchangeable in all respects. That even means that a combination of two characters can be canonically equivalent to one character. The second relationship is _compatibility_, meaning that two sequences of code points having different appearances but can be used interchangeably in certain situations.

The important thing to understand is that due to these relationships, it’s possible to have two strings that represent fundamentally the same text and yet have them contain different code point sequences. For example, the character “æ” and the string “ae” may be used interchangeably even though they are different code points. These two strings would therefore be unequal in JavaScript unless they are normalized in some way.

ECMAScript 6 supports Unicode normalization forms through a new `normalize()` method on strings. This method optionally accepts a single string parameter indicating the Unicode normalization form to apply: `"NFC"` (default), `"NFD"`, `"NFKC"`, or `"NFKD"`. It’s beyond the scope of this book to explain the differences between these four forms. Just keep in mind that, when comparing strings, both strings must be normalized to the same form. For example:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

In this code, the strings in a `values` array are converted into a normalized form so that the array can be sorted appropriately. You can accomplish the sort on the original array by calling `normalize()` as part of the comparator:

<div class="code-block">

<div class="highlight">

    values

</div>

</div>

Once again, the most important thing to remember is that both values must be normalized in the same way. These examples have used the default, NFC, but you can just as easily specify one of the others:

<div class="code-block">

<div class="highlight">

    values

</div>

</div>

If you’ve never worried about Unicode normalization before, then you probably won’t have much use for this method. However, knowing that it is available will help, should you ever end up working on an internationalized application.

#### The Regular Expression u Flag

Many common string operations are accomplished by using regular expressions. However, as noted earlier, regular expressions also work on the basis of 16-bit code units each representing a single character. That’s why the single character match in the earlier example didn’t work. To address this problem, ECMAScript 6 defines a new flag for regular expressions: `u` for “Unicode”.

When a regular expression has the `u` flag set, it switches modes to work on characters and not code units. That means the regular expression will no longer get confused about surrogate pairs in strings and can behave as expected. For example:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

Adding the `u` flag allows the regular expression to correctly match the string by characters. Unfortunately, ECMAScript 6 does not natively have a way of determining how many code points are present in a string; fortunately, regular expressions with the `u` flag can be used to figure it out:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

The regular expression in this example matches both whitespace and non-whitespace characters, and is applied globally with Unicode enabled. The `result` contains an array of matches when there’s at least one match, so the array length ends up being the number of code points in the string.

<table class="warning sidebarish">

<tbody>

<tr>

<td class="sidebar-icon">![warning](/site_images/understandinges6/leanpub_warning.png)</td>

<td>

Although this approach works, it’s not very fast, especially when applied to long strings. Try to minimize counting code points whenever possible. Hopefully ECMAScript 7 will bring a more performant means by which to count code points.

</td>

</tr>

</tbody>

</table>

Since the `u` flag is a syntax change, attempting to use it in non-compliant JavaScript engines means a syntax error is thrown. The safest way to determine if the `u` flag is supported is with a function:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

This function uses the `RegExp` constructor to pass in the `u` flag as an argument. This is valid syntax even in older JavaScript engines, however, the constructor will throw an error if `u` isn’t supported.

<table class="information sidebarish">

<tbody>

<tr>

<td class="sidebar-icon">![information](/site_images/understandinges6/leanpub_info-circle.png)</td>

<td>

If your code still needs to work in older JavaScript engines, it’s best to use the `RegExp` constructor exclusively when using the `u` flag. This will prevent syntax errors and allow you to optionally detect and use the `u` flag without aborting execution.

</td>

</tr>

</tbody>

</table>

#### Unicode Identifiers

Better Unicode support in ECMAScript 6 also means changes to what characters may be used for an identifier. In ECMAScript 5, it was already possible to use Unicode escape sequences for identifiers, such as:

<div class="code-block">

<div class="highlight">

    // Valid in ECMAScript 5 and 6

</div>

</div>

In ECMAScript 6, you can also use Unicode code point escape sequences as identifiers:

<div class="code-block">

<div class="highlight">

    // Valid in ECMAScript 5 and 6

</div>

</div>

Additionally, ECMAScript 6 formally specifies valid identifiers in terms of [Unicode Standard Annex #31: Unicode Identifier and Pattern Syntax](http://unicode.org/reports/tr31/):

1.  The first character must be `<div id="leanpub-main", `_`, or any Unicode symbol with a derived core property of `ID_Start`.
2.  Each subsequent character must be `<div id="leanpub-main", `_`, `\u200c` (zero-width non-joiner), `\u200d` (zero-width joiner), or any Unicode symbol with a derived core property of `ID_Continue`.

The `ID_Start` and `ID_Continue` derived core properties are defined in Unicode Identifier and Pattern Syntax as a way to identify symbols that are appropriate for use in identifiers such as variables and domain names (the specification is not specific to JavaScript).

### Other String Changes

JavaScript strings have always lagged behind similar features of other languages. It was only in ECMAScript 5 that strings finally gained a `trim()` method, and ECMAScript 6 continues extending strings with new functionality.

#### includes(), startsWith(), endsWith()

Developers have used `indexOf()` as a way to identify strings inside of other strings since JavaScript was first introduced. ECMAScript 6 adds three new methods whose purpose is to identify strings inside of other strings:

*   `includes()` - returns true if the given text is found anywhere within the string or false if not.
*   `startsWith()` - returns true if the given text is found at the beginning of the string or false if not.
*   `endsWith()` - returns true if the given text is found at the end of the string or false if not.

Each of these methods accepts two arguments: the text to search for and an optional location from which to start the search. When the second argument is omitted, `includes()` and `startsWith()` start search from the beginning of the string while `endsWith()` starts from the end. In effect, the second argument results in less of the string being searched. Here are some examples:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

These three methods make it much easier to identify substrings without needing to worry about identifying their exact position.

<table class="information sidebarish">

<tbody>

<tr>

<td class="sidebar-icon">![information](/site_images/understandinges6/leanpub_info-circle.png)</td>

<td>

All of these methods return a boolean value. If you need to find the position of a string within another, use `indexOf()` or `lastIndexOf()`.

</td>

</tr>

</tbody>

</table>

<table class="warning sidebarish">

<tbody>

<tr>

<td class="sidebar-icon">![warning](/site_images/understandinges6/leanpub_warning.png)</td>

<td>

The `startsWith()`, `endsWith()`, and `includes()` methods will throw an error if you pass a regular expression instead of a string. This stands in contrast to `indexOf()` and `lastIndexOf()`, which both convert a regular expression argument into a string and then search for that string.

</td>

</tr>

</tbody>

</table>

#### repeat()

ECMAScript 6 also adds a `repeat()` method to strings. This method accepts a single argument, which is the number of times to repeat the string, and returns a new string that has the original string repeated the specified number of times. For example:

<div class="code-block">

<div class="highlight">

    console

</div>

</div>

This method is really a convenience function above all else, which can be especially useful when dealing with text manipulation. One example where this functionality comes in useful is with code formatting utilities where you need to create indentation levels:

<div class="code-block">

<div class="highlight">

    // indent using a specified number of spaces

</div>

</div>

### Other Regular Expression Changes

Regular expressions are an important part of working with strings in JavaScript, and like many parts of the language, haven’t really changed very much in recent versions. ECMAScript 6, however, makes several improvements to regular expressions to go along with the updates to strings.

#### The Regular Expression y Flag

ECMAScript 6 standardized the `y` flag after it had been implemented in Firefox as a proprietary extension to regular expressions. The `y` (sticky) flag starts matching at the position specified by its `lastIndex` property. If there is no match at that location, then the regular expression stops matching. For example:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

In this example, three regular expressions are used, one each with the `y` flag, the `g` flag, and no flags. When used the first time, all three regular expressions return the same value `"hello1 "` (with a space at the end). After that, the `lastIndex` property is changed to 1, meaning that the regular expression should start matching from the second character. The regular expression with no flags completely ignores the change to `lastIndex` and still matches `"hello1 "`; the regular expression with the `g` flag goes on to match `"hello2 "` because it is searching forward from the second character of the string (“e”); the sticky regular expression doesn’t match anything beginning at the second character so `stickyResult` is `null`.

The sticky flag saves the index of the next character after the last match in `lastIndex` whenever an operation is performed. If an operation results in no match then `lastIndex` is set back to 0\. This behavior is the same as the global flag:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

The value of `lastIndex` changed to 7 after the first call to `exec()` and to 14 after the second call for both the sticky and global patterns.

There are also a couple other subtle details to the sticky flag:

1.  The `lastIndex` property is only honored when calling methods on the regular expression object such as `exec()` and `test()`. Passing the regular expression to a string method, such as `match()`, will not result in the sticky behavior.
2.  When using the `^` character to match the start of a string, sticky regular expressions will only match from the start of the string (or start of line in multiline mode). So long as `lastIndex` is 0, the `^` makes a sticky regular expression no different from a non-sticky one. If `lastIndex` doesn’t correspond to the beginning of the string (in single-line mode) or the beginning of a line (in multiline mode), the sticky regular expression will never match

As with other regular expression flags, you can detect the presence of `y` by using a property. The `sticky` property is set to true with the sticky flag is present and false if not:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

The `sticky` property is read-only based on the presence of the flag and so cannot be changed in code.

Similar to the `u` flag, the `y` flag is a syntax change, so it will cause a syntax error in older JavaScript engines. You can use the same approach to detect support:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

Also similar to `u`, if you need to use `y` in code that runs in older JavaScript engines, be sure to use the `RegExp` constructor when defining those regular expressions to avoid a syntax error.

#### Duplicating Regular Expressions

In ECMAScript 5, you can duplicate regular expressions by passing them into the `RegExp` constructor, such as:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

However, if you provide the second argument to `RegExp`, which specifies the flags for the regular expression, then an error is thrown:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

If you execute this code in an ECMAScript 5 environment, you’ll get an error stating that the second argument cannot be used when the first argument is a regular expression. ECMAScript 6 changed this behavior such that the second argument is allowed and will override whichever flags are present on the first argument. For example:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

In this code, `re1` has the case-insensitive `i` flag present while `re2` has only the global `g` flag. The `RegExp` constructor duplicated the pattern from `re1` and then substituted `g` for `i`. If the second argument was missing then `re2` would have the same flags as `re1`.

#### The `flags` Property

In ECMAScript 5, it’s possible to get the text of the regular expression by using the `source` property, but to get the flag string requires parsing the output of `toString()`, such as:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

ECMAScript 6 adds a `flags` property to go along with `source`. Both properties are prototype accessor properties with only a getter assigned (making them read-only). The addition of `flags` makes it easier to inspect regular expressions for both debugging and inheritance purposes.

A late addition to ECMAScript 6, the `flags` property returns the string representation of any flags applied to a regular expression. For example:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

Using `source` and `flags` together allow you to extract just the pieces of the regular expression that are necessary without needing to parse the regular expression string directly.

### Object.is()

When you want to compare two values, you’re probably used to using either the equals operator (`==`) or the identically equals operator (`===`). Many prefer to use the latter to avoid type coercion during the comparison. However, even the identically equals operator isn’t entirely accurate. For example, the values +0 and -0 are considered equal by `===` even though they are represented differently in the JavaScript engine. Also `NaN === NaN` returns `false`, which necessitates using `isNaN()` to detect `NaN` properly.

ECMAScript 6 introduces `Object.is()` to make up for the remaining quirks of the identically equals operator. This method accepts two arguments and returns `true` if the values are equivalent. Two values are considered equivalent when they are of the same type and have the same value. In many cases, `Object.is()` works the same as `===`. The only differences are that +0 and -0 are considered not equivalent and `NaN` is considered equivalent to `NaN`. Here are some examples:

<div class="code-block">

<div class="highlight">

    console

</div>

</div>

In most cases you will probably still want to use `==` or `===` for comparing values, as special cases covered by `Object.is()` may not affect you directly.

### Block bindings

Traditionally, one of the tricky parts of JavaScript has been the way that `var` declarations work. In most C-based languages, variables are created at the spot where the declaration occurs. In JavaScript, however, this is not the case. Variables declared using `var` are _hoisted_ to the top of the function (or global scope) regardless of where the actual declaration occurs. For example:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

If you are unfamiliar with JavaScript, you might expect that the variable `value` is only defined if `condition` evaluates to true. In fact, the variable `value` is declared regardless. The JavaScript engine changes the function to look like this:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

The declaration of `value` is moved to the top (hoisted) while the initialization remains in the same spot. That means the variable `value` is actually still accessible from within the `else` clause, it just has a value of `undefined` because it hasn’t been initialized.

It often takes new JavaScript developers some time to get used to declaration hoisting and this unique behavior can end up causing bugs. For this reason, ECMAScript 6 introduces block level scoping options to make the control of variable lifecycle a little more powerful.

#### Let declarations

The `let` declaration syntax is the same as for `var`. You can basically replace `var` with `let` to declare a variable but keep its scope to the current code block. For example:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

This function now behaves much closer to other C-based languages. The variable `value` is declared using `let` instead of `var`. That means the declaration is not hoisted to the top, and the variable `value` is destroyed once execution has flowed out of the `if` block. If `condition` evaluates to false, then `value` is never declared or initialized.

Perhaps one of the areas where developers most want block level scoping of variables is with `for` loops. It’s not uncommon to see code such as this:

<div class="code-block">

<div class="highlight">

    for

</div>

</div>

In other languages, where block level scoping is the default, code like this works as intended. In JavaScript, the variable `i` is still accessible after the loop is completed because the `var` declaration was hoisted. Using `let` allows you to get the intended behavior:

<div class="code-block">

<div class="highlight">

    for

</div>

</div>

In this example, the variable `i` only exists within the `for` loop. Once the loop is complete, the variable is destroyed and is no longer accessible elsewhere.

<div class="aside sidebarish">

#### Using let in loops

The behavior of `let` inside of loops is slightly different than with other blocks. Instead of creating a variable that is used with each iteration of the loop, each iteration actually gets its own variable to use. This is to solve an old problem with JavaScript loops. Consider the following:

<div class="code-block">

<div class="highlight">

<pre> `var` `funcs` `=` `[];`

 `for` `(``var` `i``=``0``;` `i` `<` `10``;` `i``++``)` `{`
     `funcs``.``push``(``function``()` `{` `console``.``log``(``i``);` `});`
 `}`

 `funcs``.``forEach``(``function``(``func``)` `{`
     `func``();`     `// outputs the number "10" ten times`
 `});`
</pre>

</div>

</div>

This code will output the number `10` ten times in a row. That’s because the variable `i` is shared across each iteration of the loop, meaning the closures created inside the loop all hold a reference to the same variable. The variable `i` has a value of `10` once the loop completes, and so that’s the value each function outputs.

To fix this problem, developers use immediately-invoked function expressions (IIFEs) inside of loops to force a new copy of the variable to be created:

<div class="code-block">

<div class="highlight">

<pre> `var` `funcs` `=` `[];`

 `for` `(``var` `i``=``0``;` `i` `<` `10``;` `i``++``)` `{`
     `funcs``.``push``((``function``(``value``)` `{`
         `return` `function``()` `{`
             `console``.``log``(``value``);`
         `}`
     `}(``i``)));`
 `}`

 `funcs``.``forEach``(``function``(``func``)` `{`
     `func``();`     `// outputs 0, then 1, then 2, up to 9`
 `});`
</pre>

</div>

</div>

This version of the example uses an IIFE inside of the loop. The `i` variable is passed to the IIFE, which creates its own copy and stores it as `value`. This is the value used of the function for that iteration, so calling each function returns the expected value.

A `let` declaration does this for you without the IIFE. Each iteration through the loop results in a new variable being created and initialized to the value of the variable with the same name from the previous iteration. That means you can simplify the process by using this code:

<div class="code-block">

<div class="highlight">

<pre> `var` `funcs` `=` `[];`

 `for` `(``let` `i``=``0``;` `i` `<` `10``;` `i``++``)` `{`
     `funcs``.``push``(``function``()` `{` `console``.``log``(``i``);` `});`
 `}`

 `funcs``.``forEach``(``function``(``func``)` `{`
     `func``();`     `// outputs 0, then 1, then 2, up to 9`
 `})`
</pre>

</div>

</div>

This code works exactly like the code that used `var` and an IIFE but is, arguably, cleaner.

</div>

Unlike `var`, `let` has no hoisting characteristics. A variable declared with `let` cannot be accessed until after the `let` statement. Attempting to do so results in a reference error:

<div class="code-block">

<div class="highlight">

    if

</div>

</div>

In this code, the variable `value` is defined and initialized using `let`, but that statement is never executed because the previous line throws an error. The issue is that `value` exists in what has become known as the _temporal dead zone_ (TDZ). The TDZ is never named explicitly in the specification, but is a term often used to describe the non-hoisting behavior of `let`.

When a JavaScript parser looks through the upcoming block to find variable declarations, it results in either hoisting the declaration (for `var`) or placing the declaration in the TDZ. Any attempt to access a variable in the TDZ results in a runtime error. Only once execution flows to the variable declaration is that variable removed from the TDZ and therefore safe to use.

The same is true anytime you attempt to use a variable declared with `let` inside of the same block prior to it being defined. Even the normally safe-to-use `typeof` operator isn’t safe:

<div class="code-block">

<div class="highlight">

    if

</div>

</div>

Here, `typeof value` throws the same error as the previous example. You cannot use a `let` variable before its declaration within the same block. However, you can use `typeof` outside of the block:

<div class="code-block">

<div class="highlight">

    console

</div>

</div>

The variable `value` isn’t in the TDZ when the `typeof` operation executes because it occurs outside of the block in which `value` is declared. That means there is no `value` binding and `typeof` simply returns `"undefined"`.

If an identifier has already been defined in the block, then using the identifier in a `let` declaration causes an error to be thrown. For example:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

In this example, `count` is declared twice, once with `var` and once with `let`. Because `let` will not redefine an identifier that already exists in the same scope, the declaration throws an error. No error is thrown if a `let` declaration creates a new variable in a scope with the same name as a variable in the containing scope, such as:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

Here, the `let` declaration will not throw an error because it is creating a new variable called `count` within the `if` statement. This new variable shadows the global `count`, preventing access to it from within the `if` block.

<div class="aside sidebarish">

#### Global let Declarations

There is the potential for naming collisions when using `let` in the global scope because the global object has predefined properties. Using `let` to define a variable that shares a name with a property of the global object can produce an error because global object properties may be nonconfigurable. Since `let` doesn’t allow redefinition of the same identifier in the same scope, it’s not possible to shadow nonconfigurable global properties. Attempting to do so will result in an error. For example:

<div class="code-block">

<div class="highlight">

<pre> `let` `RegExp` `=` `"Hello!"``;`          `// ok`
 `let` `undefined` `=` `"Hello!"``;`       `// throws error`
</pre>

</div>

</div>

The first line of this example redefines the global `RegExp` as a string. Even though this would be problematic, there is no error thrown. The second line throws an error because `undefined` is a nonconfigurable own property of the global object. Since its definition is locked down by the environment, the `let` declaration is illegal.

It’s unusual to use `let` in the global scope, but if you do, it’s important to understand this situation.

</div>

The long term intent is for `let` to replace `var`, as the former behaves more like variable declarations in other languages. If you are writing JavaScript that will execute only in an ECMAScript 6 or higher environment, you may want to try using `let` exclusively and leaving `var` for other scripts that require backwards compatibility.

<table class="information sidebarish">

<tbody>

<tr>

<td class="sidebar-icon">![information](/site_images/understandinges6/leanpub_info-circle.png)</td>

<td>

Since `let` declarations are _not_ hoisted to the top of the enclosing block, you may want to always place `let` declarations first in the block so that they are available to the entire block.

</td>

</tr>

</tbody>

</table>

#### Constant declarations

Another new way to define variables is to use the `const` declaration syntax. Variables declared using `const` are considered to be _constants_, so the value cannot be changed once set. For this reason, every `const` variable must be initialized. For example:

<div class="code-block">

<div class="highlight">

    // Valid constant

</div>

</div>

Constants are also block-level declarations, similar to `let`. That means constants are destroyed once execution flows out of the block in which they were declared, and declarations are not hoisted to the top of the block. For example:

<div class="code-block">

<div class="highlight">

    if

</div>

</div>

In this code, the constant `MAX_ITEMS` is declared within an `if` statement. Once the statement finishes executing, `MAX_ITEMS` is destroyed and is not accessible outside of that block.

Also similar to `let`, an error is thrown whenever a `const` declaration is made with an identifier for an already-defined variable in the same scope. It doesn’t matter if that variable was declared using `var` (for global or function scope) or `let` (for block scope). For example:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

The big difference between `let` and `const` is that attempting to assign to a previously defined constant will throw an error in both strict and non-strict modes:

<div class="code-block">

<div class="highlight">

    const

</div>

</div>

<table class="warning sidebarish">

<tbody>

<tr>

<td class="sidebar-icon">![warning](/site_images/understandinges6/leanpub_warning.png)</td>

<td>

Several browsers implement pre-ECMAScript 6 versions of `const`. Implementations range from being simply a synonym for `var` (allowing the value to be overwritten) to actually defining constants but only in the global or function scope. For this reason, be especially careful with using `const` in a production system. It may not be providing you with the functionality you expect.

</td>

</tr>

</tbody>

</table>

### Destructuring Assignment

JavaScript developers spend a lot of time pulling data out of objects and arrays. It’s not uncommon to see code such as this:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

Frequently, object properties are stored into local variables for more succinct code and easier access. ECMAScript 6 makes this easy by introducing _destructuring assignment_, which systematically goes through an object or array and stores specified pieces of data into local variables.

<table class="warning sidebarish">

<tbody>

<tr>

<td class="sidebar-icon">![warning](/site_images/understandinges6/leanpub_warning.png)</td>

<td>

If the right side value of a destructuring assignment evaluates to `null` or `undefined`, an error is thrown.

</td>

</tr>

</tbody>

</table>

#### Object Destructuring

Object destructuring assignment syntax uses an object literal on the left side of an assignment operation. For example:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

In this code, the value of `options.repeat` is stored in a variable called `localRepeat` and the value of `options.save` is stored in a variable called `localSave`. These are both specified using the object literal syntax where the key is the property to find on `options` and the value is the variable in which to store the property value.

<table class="information sidebarish">

<tbody>

<tr>

<td class="sidebar-icon">![information](/site_images/understandinges6/leanpub_info-circle.png)</td>

<td>

If the property with the given name doesn’t exist on the object, then the local variable gets a value of `undefined`.

</td>

</tr>

</tbody>

</table>

If you want to use the property name as the local variable name, you can omit the colon and the identifier, such as:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

Here, two local variables called `repeat` and `save` are created. They are initialized with the value of `options.repeat` and `options.save`, respectively. This shorthand is helpful when there’s no need to have different variable names.

Destructuring can also handle nested objects, such as the following:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

In this example, the `custom` property is embedded in another object. The extra set of curly braces allows you to descend into a nested object and pull out its properties.

<div class="aside sidebarish">

##### Syntax Gotcha

If you try use destructuring assignment without a `var`, `let`, or `const`, you may be surprised by the result:

<div class="code-block">

<div class="highlight">

    // syntax error

</div>

</div>

This causes a syntax error because the opening curly brace is normally the beginning of a block and blocks can’t be part of assignment expressions.

The solution is to wrap the entire expression in parentheses:

<div class="code-block">

<div class="highlight">

    // no syntax error

</div>

</div>

This now works without any problems.

</div>

#### Array Destructuring

Similarly, you can destructure arrays using array literal syntax on the left side of an assignment operation. For example:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

In this example, array destructuring pulls out the first and second values in the `colors` array. Keep in mind that the array itself isn’t changed in any way.

Similar to object destructuring, you can also nest array destructuring. Just use another set of square brackets to descend into a subarray:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

Here, the `secondColor` variable refers to the `"green"` value inside of the `colors` array. That item is contained within a second array, so the extra square brackets around `secondColor` in the destructuring assignment is necessary.

#### Mixed Destructuring

It’s possible to mix objects and arrays together in a destructuring assignment expression using a mix of object and array literals. For example:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

This example extracts two property values, `repeat` and `save`, and then two items from the `colors` array, `firstColor` and `secondColor`. Of course, you could also choose to retrieve the entire array:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

This modified example retrieves `options.colors` and stores it in the `colors` variable. Notice that `colors` is a direct reference to `options.colors` and not a copy.

Mixed destructuring is very useful for pulling values out of JSON configuration structures without navigating the entire structure.

### Numbers

JavaScript numbers can be particularly complex due to the dual usage of a single type for both integers and floats. Numbers are stored in the IEEE 754 double precision floating point format, and that same format is used to represent both types of numbers. As one of the foundational data types of JavaScript (along with strings and booleans), numbers are quite important to JavaScript developers. Given the new emphasis on gaming and graphics in JavaScript, ECMAScript 6 sought to make working with numbers easier and more powerful.

#### Octal and Binary Literals

ECMAScript 5 sought to simplify some common numerical errors by removing the previously-included octal integer literal notation in two places: `parseInt()` and strict mode. In ECMAScript 3 and earlier, octal numbers were represented with a leading `0` followed by any number of digits. For example:

<div class="code-block">

<div class="highlight">

    // ECMAScript 3

</div>

</div>

Many developers were confused by this version of octal literal numbers, and many mistakes were made as a result of misunderstanding the effects of a leading zero in various places. The most egregious was in `parseInt()`, where a leading zero meant the value would be treated as an octal rather than a decimal. This led to one of Douglas Crockford’s first JSLint rules: always use the second argument of `parseInt()` to specify how the string should be interpreted.

ECMAScript 5 cut down on the use of octal numbers. First, `parseInt()` was changed so that it ignores leading zeros in the first argument when there is no second argument. This means a number cannot accidentally be treated as octal anymore. The second change was to eliminate octal literal notation in strict mode. Attempting to use an octal literal in strict mode results in a syntax error.

<div class="code-block">

<div class="highlight">

    // ECMAScript 5

</div>

</div>

By making these two changes, ECMAScript 5 sought to eliminate a lot of the confusion and errors associated with octal literals.

ECMAScript 6 took things a step further by reintroducing an octal literal notation, along with a binary literal notation. Both of these notations take a hint from the hexadecimal literal notation of prepending `0x` or `0X` to a value. The new octal literal format begins with `0o` or `0O` while the new binary literal format begins with `0b` or `0B`. Each literal type must be followed by one or more digits, 0-7 for octal, 0-1 for binary. Here’s an example:

<div class="code-block">

<div class="highlight">

    // ECMAScript 6

</div>

</div>

Adding these two literal types allows JavaScript developers to quickly and easily include numeric values in binary, octal, decimal, and hexadecimal formats, which is very important in certain types of mathematical operations.

The `parseInt()` method doesn’t handle strings that look like octal or binary literals:

<div class="code-block">

<div class="highlight">

    console

</div>

</div>

However, the `Number()` function will convert a string containing octal or binary literals correctly:

<div class="code-block">

<div class="highlight">

    console

</div>

</div>

When using octal or binary literal in strings, be sure to understand your use case and use the most appropriate method for converting them into numeric values.

#### isFinite() and isNaN()

JavaScript has long had a couple of global methods for identifying certain types of numbers:

*   `isFinite()` determines if a value represents a finite number (not `Infinity` or `-Infinity`)
*   `isNaN()` determines if a value is `NaN` (since `NaN` is the only value that is not equal to itself)

Although intended to work with numbers, these methods are capable of inferring a numeric value from any value that is passed in. That means both methods can return incorrect results when passed a value that isn’t a number. For example:

<div class="code-block">

<div class="highlight">

    console

</div>

</div>

Both `isFinite()` and `isNaN()` pass their arguments through `Number()` to get a numeric value and then perform their comparisons on that numeric value rather than the original. This confusing outcome can lead to errors when value types are not checked before being used with one of these methods.

ECMAScript 6 adds two new methods that perform the same comparison but only for number values: `Number.isFinite()` and `Number.isNaN()`. These methods always return `false` when passed a non-number value and return the same values as their global counterparts when passed a number value:

<div class="code-block">

<div class="highlight">

    console

</div>

</div>

In this code, `Number.isFinite("25")` returns `false` even though `isFinite("25")` returns `true`; likewise `Number.isNaN("NaN")` returns `false` even though `isNaN("NaN")` returns `true`.

These two new methods are aimed at eliminating certain types of errors that can be caused when non-number values are used with `isFinite()` and `isNaN()` without dramatically changing the language.

#### parseInt() and parseFloat()

The global functions `parseInt()` and `parseFloat()` now also reside at `Number.parseInt()` and `Number.parseFloat()`. These functions behave exactly the same as the global functions of the same name. The only purpose in making this move is to categorize purely global functions that clearly relate to a specific data type. Since these functions both create numbers from strings, they are now on `Number` along with the other functions that relate to numbers.

#### Working with Integers

A lot of confusion has been caused over the years related to JavaScript’s single number type that is used to represent both integers and floats. The language goes through great pains to ensure that developers don’t need to worry about the details, but problems still leak through from time to time. ECMAScript 6 seeks to address this by making it easier to identify and work with integers.

##### Identifying Integers

The first addition is `Number.isInteger()`, which allows you to determine if a value represents an integer in JavaScript. Since integers and floats are stored differently, the JavaScript engine looks at the underlying representation of the value to make this determination. That means numbers that look like floats might actually be stored as integers and therefore return `true` from `Number.isInteger()`. For example:

<div class="code-block">

<div class="highlight">

    console

</div>

</div>

In this code, `Number.isInteger()` returns `true` for both `25` and `25.0` even though the latter looks like a float. Simply adding a decimal point to a number doesn’t automatically make it a float in JavaScript. Since `25.0` is really just `25`, it is stored as an integer. The number `25.1`, however, is stored as a float because there is a fraction value.

##### Safe Integers

However, all is not so simple with integers. JavaScript can only accurately represent integers between -2<sup>53</sup> and 2<sup>53</sup>, and outside of this “safe” range, binary representations end up reused for multiple numeric values. For example:

<div class="code-block">

<div class="highlight">

    console

</div>

</div>

This example doesn’t contain a typo, two different numbers end up represented by the same JavaScript integer. The effect becomes more prevalent the further the value is outside of the safe range.

ECMAScript 6 introduces `Number.isSafeInteger()` to better identify integers that can accurately be represented in the language. There is also `Number.MAX_SAFE_INTEGER` and `Number.MIN_SAFE_INTEGER` that represent the upper and lower bounds of the same range, respectively. The `Number.isSafeInteger()` method ensures that a value is an integer and falls within the safe range of integer values:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

The number `inside` is the largest safe integer, so it returns `true` for both `Number.isInteger()` and `Number.isSafeInteger()`. The number `outside` is the first questionable integer value, so it is no longer considered safe even though it’s still an integer.

Most of the time, you only want to deal with safe integers when doing integer arithmetic or comparisons in JavaScript, so it’s a good idea to use `Number.isSafeInteger()` as part of input validation.

#### New Math Methods

The aforementioned new emphasis on gaming and graphics in JavaScript led to the realization that many mathematical calculations could be done more efficiently by a JavaScript engine than with pure JavaScript code. Optimization strategies like asm.js, which works on a subset of JavaScript to improve performance, need more information to perform calculations in the fastest way possible. It’s important, for instance, to know whether the numbers should be treated as 32-bit integers or as 64-bit floats.

As a result, ECMAScript 6 adds several new methods to the `Math` object. These new methods are important for improving the speed of common mathematical calculations, and therefore, improving the speed of applications that must perform many calculations (such as graphics programs). The new methods are listed below.

<table style="width: 80%;">

<thead>

<tr>

<th>Method</th>

<th>Description</th>

</tr>

</thead>

<tbody>

<tr>

<td>`Math.acosh(x)`</td>

<td>Returns the inverse hyperbolic cosine of `x`.</td>

</tr>

<tr>

<td>`Math.asinh(x)`</td>

<td>Returns the inverse hyperbolic sine of `x`.</td>

</tr>

<tr>

<td>`Math.atanh(x)`</td>

<td>Returns the inverse hyperbolic tangent of `x`</td>

</tr>

<tr>

<td>`Math.cbrt(x)`</td>

<td>Returns the cubed root of `x`.</td>

</tr>

<tr>

<td>`Math.clz32(x)`</td>

<td>Returns the number of leading zero bits in the 32-bit integer representation of `x`.</td>

</tr>

<tr>

<td>`Math.cosh(x)`</td>

<td>Returns the hyperbolic cosine of `x`.</td>

</tr>

<tr>

<td>`Math.expm1(x)`</td>

<td>Returns the result of subtracting 1 from the exponential function of `x`</td>

</tr>

<tr>

<td>`Math.fround(x)`</td>

<td>Returns the nearest single-precision float of `x`.</td>

</tr>

<tr>

<td>`Math.hypot(...values)`</td>

<td>Returns the square root of the sum of the squares of each argument.</td>

</tr>

<tr>

<td>`Math.imul(x, y)`</td>

<td>Returns the result of performing true 32-bit multiplication of the two arguments.</td>

</tr>

<tr>

<td>`Math.log1p(x)`</td>

<td>Returns the natural logarithm of `1 + x`.</td>

</tr>

<tr>

<td>`Math.log10(x)`</td>

<td>Returns the base 10 logarithm of `x`.</td>

</tr>

<tr>

<td>`Math.log2(x)`</td>

<td>Returns the base 2 logarithm of `x`.</td>

</tr>

<tr>

<td>`Math.sign(x)`</td>

<td>Returns -1 if the `x` is negative, 0 if `x` is +0 or -0, or 1 if `x` is positive.</td>

</tr>

<tr>

<td>`Math.sinh(x)`</td>

<td>Returns the hyperbolic sine of `x`.</td>

</tr>

<tr>

<td>`Math.tanh(x)`</td>

<td>Returns the hyperbolic tangent of `x`.</td>

</tr>

<tr>

<td>`Math.trunc(x)`</td>

<td>Removes fraction digits from a float and returns an integer.</td>

</tr>

</tbody>

</table>

It’s beyond the scope of this book to explain each new method and what it does in detail. However, if you are looking for a reasonably common calculation, be sure to check the new `Math` methods before implementing it yourself.

### Summary

ECMAScript 6 makes a lot of changes, both large and small, to JavaScript. Some of the smaller changes detailed in this chapter will likely be overlooked by many but they are just as important to the evolution of the language as the big changes.

Full Unicode support allows JavaScript to start dealing with UTF-16 characters in logical ways. The ability to transfer between code point and character via `codePointAt()` and `String.fromCodePoint()` is an important step for string manipulation. The addition of the regular expression `u` flag makes it possible to operate on code points instead of 16-bit characters, and the `normalize()` method allows for more appropriate string comparisons.

Additional methods for working with strings were added, allowing you to more easily identify substrings no matter where they are found, and more functionality was added to regular expressions. The `Object.is()` method performs strict equality on any value, effectively becoming a safer version of `===` when dealing with special JavaScript values.

The `let` and `const` block bindings introduce lexical scoping to JavaScript. These declarations are not hoisted and only exist within the block in which they are declared. That means behavior that is more like other languages and less likely to cause unintentional errors, as variables can now be declared exactly where they are needed. It’s expected that the majority of JavaScript code going forward will use `let` and `const` exclusively, effectively making `var` a deprecated part of the language.

ECMAScript 6 makes it easier to work with numbers through the introduction of new syntax and new methods. The binary and octal literal forms allow you to embed numbers directly into source code while keeping the most appropriate representation visible. `Number.isFinite()` and `Number.isNaN()` are introduced as safer versions of their respective global methods. You can more easily identify integers using `Number.isInteger()` and `Number.isSafeInteger()`, as well as perform more mathematical operations thanks to new methods on `Math`.

Though many of these changes are small, they will make a significant difference in the lives of JavaScript developers for years to come. Each change addresses a particular concern that can otherwise require a lot of custom code to address. By building this functionality into the language, developers can focus on writing the code for their product rather than low-level utilities.

## Functions

Functions are an important part of any programming language, and JavaScript functions hadn’t changed much since the language was first introduced. This left a backlog of problems and nuanced behavior that made it easy to make mistakes or require more code just to achieve a very common behavior.

ECMAScript 6 functions made a big leap forward, taking into account years of complaints and asks from JavaScript developers. The result is a number of incremental improvements on top of ECMAScript 5 functions that make programming in JavaScript less error-prone and more powerful than ever before.

### Default Parameters

Functions in JavaScript are unique in that they allow any number of parameters to be passed regardless of the number of declared parameters in the function definition. This allows you to define functions that can handle different number of parameters, often by just filling in default values when ones aren’t provided. In ECMAScript 5 and earlier, you would likely use the following pattern to accomplish this:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

In this example, both `timeout` and `callback` are actually optional because they are given a default value if not provided. The logical OR operator (`||`) always returns the second operand when the first is falsy. Since named function parameters that are not explicitly provided are set to `undefined`, the logical OR operator is frequently used to provide default values for missing parameters. There is a flaw with this approach, however, in that a valid value for `timeout` might actually be `0`, but this would replace it with `2000` because `0` is falsy.

Other ways of determining if any parameters are missing include checking `arguments.length` for the number of parameters that were passed or directly inspecting each parameter to see if it is not `undefined`.

ECMAScript 6 makes it easier to provide default values for parameters by providing initializations that are used when the parameter isn’t formally passed. For example:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

Here, only the first parameter is expected to be passed all the time. The other two parameters have default values, which makes the body of the function much smaller because you don’t need to add any code to check for a missing value. When `makeRequest()` is called with all three parameters, then the defaults are not used. For example:

<div class="code-block">

<div class="highlight">

    // uses default timeout and callback

</div>

</div>

Any parameters with a default value are considered to be optional parameters while those without a default value are considered to be required parameters.

It’s possible to specify default values for any arguments, including those that appear before arguments without default values. For example, this is fine:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

In this case, the default value for `timeout` will only be used if there is no second argument passed in or if the second argument is explicitly passed in as `undefined`. For example:

<div class="code-block">

<div class="highlight">

    // uses default timeout

</div>

</div>

In the case of default parameter values, the value of `null` is considered to be valid and the default value will not be used.

Perhaps the most interesting feature of default parameter values is that the default value need not be a primitive value. You can, for example, execute a function to retrieve the default parameter:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

Here, if the last argument isn’t provided, the function `getCallback()` is called to retrieve the correct default value. This opens up a lot of interesting possibilities to dynamically inject information into functions.

### Rest Parameters

Since JavaScript functions can be passed any number of parameters, it’s not always necessary to define each parameter specifically. Early on, JavaScript provided the `arguments` object as a way of inspecting all function parameters that were passed without necessarily defining each one individually. While that worked fine in most cases, it can become a little cumbersome to work with. For example:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

This function adds together all of the parameters that are passed to it so you can call `sum(1)` or `sum(1,2,3,4)` and it will still work. There are couple of things to notice about this function. First, it’s not at all obvious that the function is capable of handling more than one parameter. You could add in several more named parameters, but you would always fall short of indicating that this function can take any number of parameters. Second, because the first parameter is named and used directly, you have to start looking in the `arguments` object at index 1 instead of starting at index 0\. Remembering to use the appropriate indices with `arguments` isn’t necessarily difficult, but it’s one more thing to keep track of. ECMAScript 6 introduces rest parameters to help with these issues.

Rest parameters are indicated by three dots (`...`) preceding a named parameter. That named parameter then becomes an `Array` containing the rest of the parameters (which is why these are called “rest” parameters). For example, `sum()` can be rewritten using rest parameters like this:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

In this version of the function, `numbers` is a rest parameter that contains all parameters after the first one (unlike `arguments`, which contains all parameters including the first one). That means you can iterate over `numbers` from beginning to end without worry. As a bonus, you can tell by looking at the function that it is capable of handling any number of parameters.

<table class="information sidebarish">

<tbody>

<tr>

<td class="sidebar-icon">![information](/site_images/understandinges6/leanpub_info-circle.png)</td>

<td>

The `sum()` method doesn’t actually need any named parameters. You could, in theory, use only rest parameters and have it continue to work exactly the same. However, in that case, the rest parameters would effectively be the same as `arguments`, so the only benefit you gain is that the rest parameters would be an actual array, as opposed to `arguments`, which is just an array-like object.

</td>

</tr>

</tbody>

</table>

The only restriction on rest parameters is that no other named arguments can follow in the function declaration. For example, this causes syntax error:

<div class="code-block">

<div class="highlight">

    // Syntax error: Can't have a named parameter after rest parameters

</div>

</div>

Here, the parameter `last` follows the rest parameter `numbers` and causes a syntax error.

Rest parameters were designed to replace `arguments` in ECMAScript. Originally ECMAScript 4 did away with `arguments` and added rest parameters to allow for an unlimited number of arguments to be passed to functions. Even though ECMAScript 4 never came into being, the idea was kept around and reintroduced in ECMAScript 6 despite `arguments` not being removed from the language.

### Destructured Parameters

In Chapter 1, you learned about destructuring assignment. Destructuring can also be used outside of the context of an assignment expression and perhaps the most interesting such case is with destructured parameters.

It’s common for functions that take a large number of optional parameters to use an options object as one or more parameters. For example:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

There are many `setCookie()` functions in JavaScript libraries that look similar to this. The `name` and `value` are required but everything else is not. And since there is no priority order for the other data, it makes sense to have an options object with named properties rather than extra named parameters. This approach is okay, although it makes the expected input for the function a bit opaque.

Using destructured parameters, the previous function can be rewritten as follows:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

The behavior of this function is similar to the previous example, the biggest difference is the third argument uses destructuring to pull out the necessary data. Doing so makes it clear which parameters are really expected, and the destructured parameters also act like regular parameters in that they are set to `undefined` if they are not passed.

One quirk of this pattern is that the destructured parameters throw an error when the argument isn’t provided. If `setCookie()` is called with just two arguments, it results in a runtime error:

<div class="code-block">

<div class="highlight">

    // Error!

</div>

</div>

This code throws an error because the third argument is missing (`undefined`). To understand why this is an error, it helps to understand that destructured parameters are really just a shorthand for destructured assignment. The JavaScript engine is actually doing this:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

Since destructuring assignment throws an error when the right side expression evaluates to `null` or `undefined`, the same is true when the third argument isn’t passed.

You can work around this behavior by providing a default value for the destructured parameter:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

This example now works exactly the same as the first example in this section. Providing the default value for the destructured parameter means that `secure`, `path`, `domain`, and `expires` will all be `undefined` if the third argument to `setCookie()` isn’t provided.

<table class="information sidebarish">

<tbody>

<tr>

<td class="sidebar-icon">![information](/site_images/understandinges6/leanpub_info-circle.png)</td>

<td>

It’s recommended to always provide the default value for destructured parameters to avoid these types of errors.

</td>

</tr>

</tbody>

</table>

### The Spread Operator

Closely related to rest parameters is the spread operator. Whereas rest parameters allow you to specify that multiple independent arguments should be combined into an array, the spread operator allows you to specify an array that should be split and have its items passed in as separate arguments to a function. Consider the `Math.max()` method, which accepts any number of arguments and returns the one with the highest value. It’s basic usage is as follows:

<div class="code-block">

<div class="highlight">

    let

</div>

</div>

When you’re dealing with just two values, as in this example, `Math.max()` is very easy to use. The two values are passed in and the higher value is returned. But what if you have been tracking values in an array, and now you want to find the highest value? The `Math.max()` method doesn’t allow you to pass in an array, so in ECMAScript 5 and earlier, you’d be stuck either searching the array yourself or using `apply()`:

<div class="code-block">

<div class="highlight">

    let

</div>

</div>

While possible, using `apply()` in this manner is a bit confusing - it actually seems to obfuscate the true meaning of the code with additional syntax.

The ECMAScript 6 spread operator makes this case very simple. Instead of calling `apply()`, you can pass in the array and prefix it with the same `...` pattern that is used with rest parameters. The JavaScript engine then splits up the array into individual arguments and passes them in:

<div class="code-block">

<div class="highlight">

    let

</div>

</div>

Now the call to `Math.max()` looks a bit more conventional and avoids the complexity of specifying a `this`-binding for a simple mathematical operation.

You can mix and match the spread operator with other arguments as well. Suppose you want the smallest number returned from `Math.max()` to be 0 (just in case negative numbers sneak into the array). You can pass that argument separately and still use the spread operator for the other arguments:

<div class="code-block">

<div class="highlight">

    let

</div>

</div>

In this example, the last argument passed to `Math.max()` is `0`, which comes after the other arguments are passed in using the spread operator.

The spread operator for argument passing makes using arrays for function arguments much easier. You’ll likely find it to be a suitable replacement for the `apply()` method in most circumstances.

### The name Property

Identifying functions can be challenging in JavaScript given the various ways a function can be defined. Additionally, the prevalence of anonymous function expressions makes debugging a bit more difficult, often resulting in stack traces that are hard to read and decipher. For these reasons, ECMAScript 6 adds the `name` property to all functions.

All functions in an ECMAScript 6 program will have an appropriate value for their `name` property while all others will have an empty string. For example:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

In this code, `doSomething()` has a `name` property equal to `"doSomething"` because it’s a function declaration. The anonymous function expression `doAnotherThing()` has a `name` of `"doAnotherThing"` due to the variable to which it is assigned.

While appropriate names for function declarations and function expressions are easy to find, ECMAScript 6 goes further to ensure that all functions have appropriate names:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

In this example, `doSomething.name` is `"doSomethingElse"` because the function expression itself has a name and that name takes priority over the variable to which the function was assigned. The `name` property of `person.sayName()` is `"sayName"`, as the value was interpreted from the object literal. Similarly, `person.firstName` is actually a getter function, so its name is `"get firstName"` to indicate this difference (setter functions are prefixed with `"set"` as well).

There are a couple of other special cases for function names. Functions created using `bind()` will have their name prefixed with `"bound"` and functions created using the `Function` constructor have a name of `"anonymous"`:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

The `name` of a bound function will always be the `name` of the function being bound prefixed with the `"bound "`, so the bound version of `doSomething()` is `"bound doSomething"`.

### new.target, [[Call]], and [[Construct]]

In ECMAScript 5 and earlier, functions serve the double purpose of being callable with or without `new`. When used with `new`, the `this` value inside of a function is a new object and that new object is returned. For example:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

Calling `Person()` without `new` results in `undefined` (and a `name` property being set on the global object in non-strict mode). It’s fairly obvious from the code that the intent is to use `Person` with `new` to create a new object. The confusion over the dual roles of functions led to some changes in ECMAScript 6.

First, the specification defines two different internal-only methods that every function has: `[[Call]]` and `[[Construct]]`. When a function is called without `new`, the `[[Call]]` method is executed, which essentially executes the body of the function as it appears in the code. When a function is called with `new`, that’s when the `[[Construct]]` method is called. The `[[Construct]]` method is responsible for creating a new object, called the _new target_, and then executing the function body with `this` set to the new target. Functions that have a `[[Construct]]` method are called _constructors_.

<table class="information sidebarish">

<tbody>

<tr>

<td class="sidebar-icon">![information](/site_images/understandinges6/leanpub_info-circle.png)</td>

<td>

Keep in mind that not all functions have `[[Construct]]`, and therefore not all function can be called with `new`. Arrow functions, discussed later in this chapter, do not have a `[[Construct]]` method.

</td>

</tr>

</tbody>

</table>

The most popular way to determine if a function was called with `new` in ECMAScript 5 is to use `instanceof`, for example:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

Here, the `this` value is checked to see if it’s an instance of the constructor, and if so, it continues as normal. If `this` isn’t an instance of `Person`, then an error is thrown. This works because the `[[Construct]]` method creates a new instance of `Person` and assigns it to `this`. Unfortunately, this approach is not completely reliable because `this` can be an instance of `Person` without using `new`, for example:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

The call to `Person.call()` passes the `person` variable as the first argument, which means `this` is set to `person` inside of the `Person` function. To the function, there’s no way to distinguish this from being called with `new`.

To solve this problem, ECMAScript 6 introduces the `new.target` _metaproperty_. When a function’s `[[Construct]]` method is called, `new.target` is filled with the newly created object instance that will become `this` inside the function body. If `[[Call]]` is executed, then `new.target` is `undefined`. That means you can now safely detect if a function is called with `new` by checking that `new.target` is defined:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

By using `new.target` instead of `this instanceof Person`, the `Person` constructor is now correctly throwing an error when used without `new`.

<table class="warning sidebarish">

<tbody>

<tr>

<td class="sidebar-icon">![warning](/site_images/understandinges6/leanpub_warning.png)</td>

<td>

Using `new.target` outside of a function is a syntax error.

</td>

</tr>

</tbody>

</table>

### Block-Level Functions

In ECMAScript 3 and earlier, a function declaration occurring inside of a block (a _block-level function_) was technically a syntax error, but many browsers still supported it. Unfortunately, each browser that allowed the syntax behaved in a slightly different way, so it is considered a best practice to avoid function declarations inside of blocks (the best alternative is to use a function expression).

In an attempt to reign in this incompatible behavior, ECMAScript 5 strict mode introduced an error whenever a function declaration was used inside of a block. For example:

<div class="code-block">

<div class="highlight">

    "use strict"

</div>

</div>

In ECMAScript 5, this code throws a syntax error. In ECMAScript 6, the `doSomething()` function is considered a block-level declaration and can be accessed and called within the same block in which it was defined. For example:

<div class="code-block">

<div class="highlight">

    "use strict"

</div>

</div>

Block level functions are hoisted to the top of the block in which they are defined, so `typeof doSomething` returns `"function"` even though it appears before the function declaration in the code. Once the `if` block is finished executing, `doSomething()` no longer exists.

Block level functions are a similar to `let` function expressions in that the function definition is removed once execution flows out of the block in which it’s defined. The key difference is that block level functions are hoisted to the top of the containing block while `let` function expressions are not hoisted. For example:

<div class="code-block">

<div class="highlight">

    "use strict"

</div>

</div>

Here, code execution stops when `typeof doSomething` is executed because the `let` statement hasn’t been executed yet.

Whether you want to use block level functions or `let` expressions depends on whether or not you want the hoisting behavior.

ECMAScript 6 also allows block-level functions in nonstrict mode, but the behavior is slightly different. Instead of hoisting these declarations to the top of the block, they are hoisted all the way to the containing function or global environment. For example:

<div class="code-block">

<div class="highlight">

    // ECMAScript 6 behavior

</div>

</div>

In this example, `doSomething()` is hoisted into the global scope so that it still exists outside of the `if` block. ECMAScript 6 standardized this behavior to remove the incompatible browser behaviors that previously existed. ECMAScript 6 runtimes will all behave in the same way.

### Arrow Functions

One of the most interesting new parts of ECMAScript 6 are arrow functions. Arrow functions are, as the name suggests, functions defined with a new syntax that uses an “arrow” (`=>`). However, arrow functions behave differently than traditional JavaScript functions in a number of important ways:

*   **Lexical `this` binding** - The value of `this` inside of the function is determined by where the arrow function is defined not where it is used.
*   **Not `new`able** - Arrow functions do not have a `[[Construct]]` method and therefore cannot be used as constructors. Arrow functions throw an error when used with `new`.
*   **Can’t change `this`** - The value of `this` inside of the function can’t be changed, it remains the same value throughout the entire lifecycle of the function.
*   **No `arguments` object** - You can’t access arguments through the `arguments` object, you must use named arguments or other ES6 features such as rest arguments.

There are a few reasons why these differences exist. First and foremost, `this` binding is a common source of error in JavaScript. It’s very easy to lose track of the `this` value inside of a function, which can result in unintended consequences. Second, by limiting arrow functions to simply executing code with a single `this` value, JavaScript engines can more easily optimize these operations (as opposed to regular functions, which might be used as a constructor or otherwise modified).

<table class="information sidebarish">

<tbody>

<tr>

<td class="sidebar-icon">![information](/site_images/understandinges6/leanpub_info-circle.png)</td>

<td>

Arrow functions also have a `name` property that follows the same rule as other functions.

</td>

</tr>

</tbody>

</table>

### Syntax

The syntax for arrow functions comes in many flavors depending upon what you are trying to accomplish. All variations begin with function arguments, followed by the arrow, followed by the body of the function. Both the arguments and the body can take different forms depending on usage. For example, the following arrow function takes a single argument and simply returns it:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

When there is only one argument for an arrow function, that one argument can be used directly without any further syntax. The arrow comes next and the expression to the right of the arrow is evaluated and returned. Even though there is no explicit `return` statement, this arrow function will return the first argument that is passed in.

If you are passing in more than one argument, then you must include parentheses around those arguments. For example:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

The `sum()` function simply adds two arguments together and returns the result. The only difference is that the arguments are enclosed in parentheses with a comma separating them (same as traditional functions).

If there are no arguments to the function, then you must include an empty set of parentheses:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

When you want to provide a more traditional function body, perhaps consisting of more than one expression, then you need to wrap the function body in braces and explicitly define a return value, such as:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

You can more or less treat the inside of the curly braces as the same as in a traditional function with the exception that `arguments` is not available.

If you want to create a function that does nothing, then you need to include curly braces:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

Because curly braces are used to denote the function’s body, an arrow function that wants to return an object literal outside of a function body must wrap the literal in parentheses. For example:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

Wrapping the object literal in parentheses signals that the braces are an object literal instead of the function body.

#### Immediately-Invoked Function Expressions (IIFEs)

A popular use of functions in JavaScript is immediately-invoked function expressions (IIFEs). IIFEs allow you to define an anonymous function and call it immediately without saving a reference. This pattern comes in handy when you want to create a scope that is shielded from the rest of a program. For example:

<div class="code-block">

<div class="highlight">

    let

</div>

</div>

In this code, the IIFE is used to create an object with a `getName()` method. The method uses the `name` argument as the return value, effectively making `name` a private member of the returned object.

You can accomplish the same thing using arrow functions so long as you wrap the arrow function in parentheses:

<div class="code-block">

<div class="highlight">

    let

</div>

</div>

Note that the location of the parentheses in this example is different from the previous. The previous example using the `function` keyword wraps parentheses around the entire expression, including passing the argument `"Nicholas"` to the function. This example has the parentheses around just the arrow function and then passes the argument.

#### Lexical this Binding

One of the most common areas of error in JavaScript is the binding of `this` inside of functions. Since the value of `this` can change inside of a single function depending on the context in which it’s called, it’s possible to mistakenly affect one object when you meant to affect another. Consider the following example:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

In this code, the object `PageHandler` is designed to handle interactions on the page. The `init()` method is called to set up the interactions and that method in turn assigns an event handler to call `this.doSomething()`. However, this code doesn’t work as intended. The call to `this.doSomething()` is broken because `this` is a reference to the element object (in this case `document`) that was the target of the event, instead of being bound to `PageHandler`. If you tried to run this code, you will get an error when the event handler fires because `this.doSomething()` doesn’t exist on the target `document` object.

You can bind the value of `this` to `PageHandler` explicitly using the `bind()` method on the function:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

Now the code works as expected, but may look a little bit strange. By calling `bind(this)`, you’re actually creating a new function whose `this` is bound to the current `this`, which is `PageHandler`. The code now works as you would expect even though you had to create an extra function to get the job done.

Arrow functions have implicit `this` binding, which means that the value of `this` inside of an arrow function is always the same as the value of `this` in the scope in which the arrow function was defined. For example:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

The event handler in this example is an arrow function that calls `this.doSomething()`. The value of `this` is the same as it is within `init()`, so this version of the example works similarly to the one using `bind()`. Even though the `doSomething()` method doesn’t return a value, it is still the only statement executed necessary for the function body and so there is no need to include braces.

Arrow functions are designed to be “throwaway” functions and so cannot be used to define new types. This is evident by the missing `prototype` property that regular functions have. If you try to use the `new` operator with an arrow function, you’ll get an error:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

Also, since the `this` value is statically bound to the arrow function, you cannot change the value of `this` using `call()`, `apply()`, or `bind()`.

The concise syntax for arrow functions makes them ideal for use with array processing. For example, if you want to sort an array using a custom comparator, you typically write something like this:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

That’s a lot of syntax for a very simple procedure. Compare that to the more terse arrow function version:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

The array methods that accept callback functions such as `sort()`, `map()`, and `reduce()` all can benefit from simpler syntax with arrow functions to change what would appear to be more complex processes into simpler code.

Generally speaking, arrow functions are designed to be used in places where anonymous functions have traditionally been used. They are not really designed to be kept around for long periods of time, hence the inability to use arrow functions as constructors. Arrow functions are best used for callbacks that are passed into other functions, as seen in the examples in this section.

#### Lexical arguments Binding

Even though arrow functions don’t have their own `arguments` object, it’s possible for them to access the `arguments` object from a containing function. That `arguments` object is then available no matter where the arrow function is executed later on. For example:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

Inside of `createArrowFunctionReturningFirstArg()`, `arguments[0]` is referenced by the created arrow function. That reference contains the first argument passed to `createArrowFunctionReturningFirstArg()`. When the arrow function is later executed, it returns `5`, which was the first argument passed in to `createArrowFunctionReturningFirstArg()`. Even though the arrow function is no longer in the scope of the function that created it, `arguments` remains accessible as a lexical binding.

#### Identifying Arrow Functions

Despite the different syntax, arrow functions are still functions and are identified as such:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

Both `typeof` and `instanceof` behave the same with arrow functions as they do with other functions.

Also like other functions, you can still use `call()`, `apply()`, and `bind()`, although the `this`-binding of the function will not be affected. Here are some examples:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

In this example, the `sum()` function is called using `call()` and `apply()` to pass arguments as you would with any function. The `bind()` method is used to create `boundSum()`, which has its two arguments bound to `1` and `2` so that they don’t need to be passed directly.

Arrow functions are appropriate to use anywhere you’re currently using an anonymous function expression, such as with callbacks.

### Summary

Functions haven’t undergone a huge change in ECMAScript 6, but rather, a series of incremental changes that make them easier to work with.

Default function parameters allow you to easily specify what value to use when a particular argument isn’t passed. Prior to ECMAScript 6, this would require some extra code inside of the function to both check for the presence of arguments and assign a different value.

Rest parameters allow you to specify an array into which all remaining parameters should be placed. Using a real array and letting you indicate which parameters to include makes rest parameters a much more flexible solution than `arguments`.

Destructured parameters use the destructuring syntax to make options objects more transparent when used as function parameters. The actual data you’re interested in can be listed out along with other named parameters.

The spread operator is a companion to rest parameters, allowing you to destructure an array into separate parameters when calling a function. Prior to ECMAScript 6, the only ways to pass individual parameters that were contained in an array were either manually specifying each parameter or using `apply()`. With the spread operator, you can easily pass an array to any function without worrying about the `this` binding of the function.

The addition of the `name` property helps to more easily identify functions for debugging and evaluation purposes. Additionally, ECMAScript 6 formally defines the behavior of block-level functions so they are no longer a syntax error in strict mode.

The behavior of a function has been defined by `[[Call]]`, normal function execution, and `[[Construct]]`, when a function is called with `new`. The `new.target` metaproperty allows you to determine if a function was called using `new` or not.

The biggest change to functions in ECMAScript 6 was the addition of arrow functions. Arrow functions are designed to be used in places where anonymous function expressions have traditionally been used. Arrow functions have a more concise syntax, lexical `this` binding, and no `arguments` object. Additionally, arrow functions can’t change their `this` binding and so can’t be used as constructors.

## Objects

A lot of ECMAScript 6 focused on improving the utility of objects. The focus makes sense given that nearly every value in JavaScript is represented by some type of object. Additionally, the number of objects used in an average JavaScript program continues to increase, meaning that developers are writing more objects all the time. With more objects comes the necessity to use them more effectively.

ECMAScript 6 improves objects in a number of ways, from simple syntax to new ways of manipulating and interacting with objects.

### Object Categories

The ECMAScript 6 specification introduced some new terminology to help distinguish between categories of objects. JavaScript has long been littered with a mix of terminology used to describe objects found in the standard as opposed to those that are added by execution environments such as the browser. ECMAScript 6 takes the time to clearly define each category of object, and it’s important to understand this terminology to have a good understanding of the language as a whole. The object categories are:

*   _Ordinary objects_ are objects that have all of the default internal behaviors for objects in JavaScript.
*   _Exotic objects_ are objects whose internal behavior is different than the default in some way.
*   _Standard objects_ are objects defined by ECMAScript 6, such as `Array`, `Date`, etc. Standard objects may be ordinary or exotic.
*   _Built-in objects_ are objects that are present in a JavaScript execution environment when a script begins to execute. All standard objects are built-in objects.

These terms are used throughout the book to explain the various objects defined by ECMAScript 6.

### Object Literal Extensions

One of the most popular patterns in JavaScript is the object literal. It’s the syntax upon which JSON is built and can be seen in nearly every JavaScript file on the Internet. The reason for the popularity is clear: a succinct syntax for creating objects that otherwise would take several lines of code to accomplish. ECMAScript 6 recognized the popularity of the object literal and extends the syntax in several ways to make object literals more powerful and even more succinct.

#### Property Initializer Shorthand

In ECMAScript 5 and earlier, object literals were simply collections of name-value pairs. That meant there could be some duplication when property values are being initialized. For example:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

The `createPerson()` function creates an object whose property names are the same as the function parameter names. The result is what appears to be duplication of `name` and `age` even though each represents a different aspect of the process.

In ECMAScript 6, you can eliminate the duplication that exists around property names and local variables by using the property initializer shorthand. When the property name is going to be the same as the local variable name, you can simply include the name without a colon and value. For example, `createPerson()` can be rewritten as follows:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

When a property in an object literal only has a name and no value, the JavaScript engine looks into the surrounding scope for a variable of the same name. If found, that value is assigned to the same name on the object literal. So in this example, the object literal property `name` is assigned the value of the local variable `name`.

The purpose of this extension is to make object literal initialization even more succinct than it already was. Assigning a property with the same name as a local variable is a very common pattern in JavaScript and so this extension is a welcome addition.

#### Method Initializer Shorthand

ECMAScript 6 also improves syntax for assigning methods to object literals. In ECMAScript 5 and earlier, you must specify a name and then the full function definition to add a method to an object. For example:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

In ECMAScript 6, the syntax is made more succinct by eliminating the colon and the `function` keyword. You can then rewrite the previous example as:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

This shorthand syntax, also called _concise method_ syntax, creates a method on the `person` object just as the previous example did. There is no difference aside from saving you some keystrokes, so `sayName()` is assigned an anonymous function expression and has all of the same characteristics as the function defined in the previous example.

<table class="information sidebarish">

<tbody>

<tr>

<td class="sidebar-icon">![information](/site_images/understandinges6/leanpub_info-circle.png)</td>

<td>

The `name` property of a method created using this shorthand is the name used before the parentheses. In the previous example, the `name` property for `person.sayName()` is `"sayName"`.

</td>

</tr>

</tbody>

</table>

#### Computed Property Names

JavaScript objects have long had computed property names through the use of square brackets instead of dot notation. The square brackets allow you to specify property names using variables and string literals that may contain characters that would be a syntax error if used in an identifier. For example:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

Both of the property names in this example have a space, making it impossible to reference those names using dot notation. However, bracket notation allows any string value to be used as a property name.

In ECMAScript 5, you could use string literals as property names in object literals, such as:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

If you could provide the string literal inside of the object literal property definition then you were all set. If, however, the property name was contained in a variable or had to be calculated, then there was no way to define that property using an object literal.

ECMAScript 6 adds computed property names to object literal syntax by using the same square bracket notation that has been used to reference computed property names in object instances. For example:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

The square brackets inside of the object literal indicate that the property name is computed, so its contents are evaluated as a string. That means you can also include expressions such as:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

Anything you would put inside of square brackets while using bracket notation on object instances will also work for computed property names inside of object literals.

### Object.assign()

One of the most popular patterns for object composition is _mixins_, in which one object receives properties and methods from another object. Many JavaScript libraries have a mixin method similar to this:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

The `mixin()` function iterates over the own properties of `supplier` and copies them onto `receiver`. This allows the `receiver` to gain new behaviors without inheritance. For example:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

In this example, `myObject` receives behavior from `EventTarget.prototype`. This gives `myObject` the ability to publish events and let others subscribe to them using `emit()` and `on()`, respectively.

This pattern became popular enough that ECMAScript 6 added `Object.assign()`, which behaves the same way. The difference in name is to reflect the actual operation that occurs. Since the `mixin()` method uses the assignment operator (`=`), it cannot copy accessor properties to the receiver as accessor properties. The name `Object.assign()` was chosen to reflect this distinction.

<table class="information sidebarish">

<tbody>

<tr>

<td class="sidebar-icon">![information](/site_images/understandinges6/leanpub_info-circle.png)</td>

<td>

Similar methods in various libraries may have other names. Some popular alternate names for the same basic functionality are `extend()` and `mix()`. There was also, briefly, an `Object.mixin()` method in ECMAScript 6 in addition to `Object.assign()`. The primary difference was that `Object.mixin()` also copied over accessor properties, but the method was removed due to concerns over the use of `super` (discussed later in this chapter).

</td>

</tr>

</tbody>

</table>

You can use `Object.assign()` anywhere the `mixin()` function would have been used:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

The `Object.assign()` method accepts any number of suppliers, and the receiver receives the properties in the order in which the suppliers are specified. That means the second supplier might overwrite a value from the first supplier on the receiver. For example:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

The value of `receiver.type` is `"css"` because the second supplier overwrote the value of the first.

The `Object.assign()` method isn’t a big addition to ECMAScript 6, but it does formalize a common function that is found in many JavaScript libraries.

<div class="aside sidebarish">

#### Working with Accessor Properties

Keep in mind that you cannot create accessor properties on the receiver by using a supplier with accessor properties. Since `Object.assign()` uses the assignment operator, an accessor property on a supplier will become a data property on the receiver. For example:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

In this code, the `supplier` has an accessor property called `name`. After using `Object.assign()`, `receiver.name` exists as a data property with the value of `"file.js"`. That’s because `supplier.name` returned “file.js” at the time `Object.assign()` was called.

</div>

### Duplicate Object Literal Properties

ECMAScript 5 strict mode introduced a check for duplicate object literal properties that would throw an error if a duplicate was found. For example:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

When running in ECMAScript 5 strict mode, this example results in a syntax error on the second `name` property.

In ECMAScript 6, the duplicate property check has been removed. Both strict and nonstrict mode code no longer check for duplicate properties and instead take the last property of the given name as the actual value.

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

In this example, the value of `person.name` is `"Greg"` because that was the last value assigned to the property.

### Changing Prototypes

Prototypes are the foundation of inheritance in JavaScript, and so ECMAScript 6 continues to make prototypes more powerful. ECMAScript 5 added the `Object.getPrototypeOf()` method for retrieving the prototype of any given object. ECMAScript 6 adds the reverse operation, `Object.setPrototypeOf()`, which allows you to change the prototype of any given object.

Normally, the prototype of an object is specified at the time of its creation, either by using a constructor or via `Object.create()`. Prior to ECMAScript 6, there was no standard way to change an object’s prototype after it had already been created. In a way, `Object.setPrototypeOf()` changes one of the biggest assumptions about objects in JavaScript to this point, which is that an object’s prototype remains unchanged after creation.

The `Object.setPrototypeOf()` method accepts two arguments, the object whose prototype should be changed and the object that should become the first argument’s prototype. For example:

<div class="code-block">

<div class="highlight">

    let

</div>

</div>

This code defines two base objects: `person` and `dog`. Both objects have a method `getGreeting()` that returns a string. The object `friend` starts out inheriting from `person`, meaning that `getGreeting()` will output `"Hello"`. When the prototype is changed to be `dog` instead, `person.getGreeting()` outputs `"Woof"` because the original relationship to `person` is broken.

The actual value of an object’s prototype is stored in an internal-only property called `[[Prototype]]`. The `Object.getPrototypeOf()` method returns the value stored in `[[Prototype]]` and `Object.setPrototypeOf()` changes the value stored in `[[Prototype]]`. However, these aren’t the only ways to work with the value of `[[Prototype]]`.

Even before ECMAScript 5 was finished, several JavaScript engines already implemented a custom property called `__proto__` that could be used to both get and set the prototype of an object. Effectively, `__proto__` was an early precursor to both `Object.getPrototypeOf()` and `Object.setPrototypeOf()`. It was unrealistic to expect all of the JavaScript engines to remove this property, so ECMAScript 6 formalized the behavior of `__proto__`.

In ECMAScript 6 engines, `Object.prototype.__proto__` is defined as an accessor property whose `get` method calls `Object.getPrototypeOf()` and whose `set` method calls `Object.setPrototypeOf()`. This means that there is no real difference between using `__proto__` and the other methods except that `__proto__` allows you to set the prototype of an object literal directly. For example:

<div class="code-block">

<div class="highlight">

    let

</div>

</div>

This example is functionally equivalent to the previous. The call to `Object.create()` has been replaced with an object literal that assigns a value to `__proto__`. The only real difference between creating an object using `Object.create()` or an object literal with `__proto__` is that the former requires you to specify full property descriptors for any additional object properties while the latter is just a standard object literal.

<table class="warning sidebarish">

<tbody>

<tr>

<td class="sidebar-icon">![warning](/site_images/understandinges6/leanpub_warning.png)</td>

<td>

The `__proto__` property is special in a number of ways:

1.  You can only specify it once in an object literal. If you specify two `__proto__` properties, then an error is thrown. This is the only object literal property that has this restriction.
2.  The computed form `["__proto__"]` acts like a regular property and does not set or return the current object’s prototype. All rules related to object literal properties apply in this form, as opposed to the non-computed form, for which there are exceptions.

It’s best to be careful when using `__proto__` to make sure you don’t get caught by these differences.

</td>

</tr>

</tbody>

</table>

### Super References

As previously mentioned, prototypes are very important for JavaScript and a lot of work went into making them easier to use in ECMAScript 6\. Among the improvements is the introduction of `super` references to more easily access functionality on an object’s prototype. For example, if you want to override a method on an object instance such that it also calls the prototype method of the same name, you would need to do the following in ECMAScript 5:

<div class="code-block">

<div class="highlight">

    let

</div>

</div>

In this example, `getGreeting()` on `friend` calls the prototype method of the same name. The `Object.getPrototypeOf()` method is used to ensure the method is always getting the accurate prototype and then an additional string is appended. The additional `.call(this)` ensures that the `this` value inside the prototype method is set correctly.

Needing to remember to use `Object.getPrototypeOf()` and `.call(this)` to call a method on the prototype is a bit involved, so ECMAScript 6 introduced `super`.

At it’s simplest, `super` acts as a pointer to the current object’s prototype, effectively acting like `Object.getPrototypeOf(this)`. So you can simplify the `getGreeting()` method by rewriting it as:

<div class="code-block">

<div class="highlight">

    let

</div>

</div>

The call to `super.getGreeting()` is the same as `Object.getPrototypeOf(this).getGreeting.call(this)` or `this.__proto__.getGreeting.call(this)`. Similarly, you can call any method on an object’s prototype by using a `super` reference.

<table class="warning sidebarish">

<tbody>

<tr>

<td class="sidebar-icon">![warning](/site_images/understandinges6/leanpub_warning.png)</td>

<td>

`super` references can only be used inside of concise methods and cannot be used in other functions or the global scope. Attempting to use `super` outside of concise methods results in a syntax error.

</td>

</tr>

</tbody>

</table>

#### Methods

Prior to ECMAScript 6, there was no formal definition of a “method” - methods were just object properties that contained functions instead of data. ECMAScript 6 formally defines a method as a function that has an internal `[[HomeObject]]` property containing the object to which the method belongs. Consider the following:

<div class="code-block">

<div class="highlight">

    let

</div>

</div>

This example defines `person` with a single method called `getGreeting()`. The `[[HomeObject]]` for `getGreeting()` is `person` by virtue of assigning the function directly to an object. The `shareGreeting()` function, on the other hand, has no `[[HomeObject]]` specified because it wasn’t assigned to an object when it was created. In most cases this difference isn’t important, but it becomes very important when using `super`.

Any reference to `super` uses the `[[HomeObject]]` to determine what to do. The first step is to call `Object.getPrototypeOf()` on the `[[HomeObject]]` to retrieve a reference to the prototype. Then, the prototype is searched for a function with the same name as the executing function. Last, the `this`-binding is set and the method is called. If a function has no `[[HomeObject]]`, or has a different one than expected, then this process won’t work. For example:

<div class="code-block">

<div class="highlight">

    let

</div>

</div>

Calling `friend.getGreeting()` returns a string while calling `getGlobalGreeting()` throws an error for improper use of `super`. Since the `getGlobalGreeting()` function has no `[[HomeObject]]`, it’s not possible to perform a lookup. Interestingly, the situation doesn’t change if `getGlobalGreeting()` is later assigned as a method on `friend`:

<div class="code-block">

<div class="highlight">

    // prototype is person

</div>

</div>

Here the global `getGlobalGreeting()` function is used to overwrite the previously-defined `getGreeting()` method on `friend`. Calling `friend.getGreeting()` at that point results in an error as well. The value of `[[HomeObject]]` is only set when the function is first created, so even assigning onto an object doesn’t fix the problem.

### Summary

Objects are at the center of programming in JavaScript, and ECMAScript 6 has made some helpful changes to objects that both make them easier to deal with and more powerful.

ECMAScript 6 makes several changes to object literals. Shorthand property definitions make it easier to assign properties whose names are the same as in-scope variables. Computed property names allow you to specify non-literal values as property names, which is something you’ve already been able to do in other areas of the language. Shorthand methods let you type a lot fewer characters in order to define methods on object literals by completely omitting the colon and `function` keyword. A loosening of the strict mode check for duplicate object literal property names was introduced as well, meaning you can now have two properties with the same name in a single object literal without an error being thrown.

The `Object.assign()` method makes it easier to change multiple properties on a single object at once. This can be very useful if you use the mixin pattern.

It’s now possible to modify an object’s prototype after it’s already created using `Object.setPrototypeOf()`. ECMAScript 6 also defines the behavior of the `__proto__` property, which is an accessor property whose getter calls `Object.getPrototypeOf()` and whose setter calls `Object.setPrototypeOf()`.

The `super` keyword can now be used to call methods on an object’s prototype. It can be used either standalone as a method, such as `super()`, or as a reference to the prototype itself, such as `super.getGreeting()`. In both cases, the `this`-binding is setup automatically to work with the current value of `this`.

## Symbols

<table class="warning sidebarish">

<tbody>

<tr>

<td class="sidebar-icon">![warning](/site_images/understandinges6/leanpub_warning.png)</td>

<td>

This chapter is a work-in-progress. As such, it may have more typos or content errors than others.

</td>

</tr>

</tbody>

</table>

ECMAScript 6 symbols began as a way to create private object members, a feature JavaScript developers have long wanted. The focus was around creating properties that were not identified by string names. Any property with a string name was easy picking to access regardless of the obscurity of the name. The initial “private names” feature aimed to create non-string property names. That way, normal techniques for detecting these private names wouldn’t work.

The private names proposal eventually evolved into ECMAScript 6 symbols. While the implementation details remained the same (non-string values for property identifiers), TC-39 dropped the requirement that these properties be private. Instead, the properties would be categorized separately, being non-enumerable by default but still discoverable.

Symbols are actually a new kind of primitive value, joining strings, numbers, booleans, `null`, and `undefined`. They are unique among JavaScript primitives in that they do not have a literal form. The ECMAScript 6 standard uses a special notation to indicate symbols, prefixing the identifier with `@@`, such as `@@create`. This book uses this same convention for ease of understanding.

<table class="warning sidebarish">

<tbody>

<tr>

<td class="sidebar-icon">![warning](/site_images/understandinges6/leanpub_warning.png)</td>

<td>

Despite the notation, symbols do not exactly map to strings beginning with “@@”. Don’t try to use string values where symbols are required.

</td>

</tr>

</tbody>

</table>

### Creating Symbols

You can create a symbol by using the `Symbol` function, such as:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

In this example, the symbol `firstName` is created and used to assign a new property on `person`. That symbol must be used each time you want to access that same property. It’s a good idea to name the symbol variable appropriately so you can easily tell what the symbol represents.

<table class="warning sidebarish">

<tbody>

<tr>

<td class="sidebar-icon">![warning](/site_images/understandinges6/leanpub_warning.png)</td>

<td>

Because symbols are primitive values, `new Symbol()` throws an error when called. It is possible to create an instance of `Symbol` via `new Object(yourSymbol)`, but it’s unclear when this capability would be useful.

</td>

</tr>

</tbody>

</table>

The `Symbol` function accepts an optional argument that is the description of the symbol. The description itself cannot be used to access the property but is used for debugging purposes. For example:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

A symbol’s description is stored internally in a property called `[[Description]]`. This property is read whenever the symbol’s `toString()` method is called either explicitly or implicitly (as in this example). It is not otherwise possible to access `[[Description]]` directly from code. It’s recommended to always provide a description to make both reading and debugging code using symbols easier.

### Identifying Symbols

Since symbols are primitive values, you can use the `typeof` operator to identify them. ECMAScript 6 extends `typeof` to return `"symbol"` when used on a symbol. For example:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

While there are other indirect ways of determining whether a variable is a symbol, `typeof` is the most accurate and preferred way of doing so.

### Using Symbols

You can use symbols anywhere you would use a computed property name. You’ve already seen the use of bracket notation in the previous sections, but you can use symbols in computed object literal property names as well as with `Object.defineProperty()`, and `Object.defineProperties()`, such as:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

With computed property names in object literals, symbols are very easy to work with.

### Sharing Symbols

You may find that you want different parts of your code to use the same symbols. For example, suppose you have two different object types in your application that should use the same symbol property to represent a unique identifier. Keeping track of symbols across files or large codebases can be difficult and error-prone. That’s why ECMAScript 6 provides a global symbol registry that you can access at any point in time.

When you want to create a symbol to be shared, use the `Symbol.for()` method instead of calling `Symbol()`. The `Symbol.for()` method accepts a single parameter, which is a string identifier for the symbol you want to create (this value is also used as the description). For example:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

The `Symbol.for()` method first searches the global symbol registry to see if a symbol with the key `"uid"` exists. If so, then it returns the already existing symbol. If no such symbol exists, then a new symbol is created and registered into the global symbol registry using the specified key. The new symbol is then returned. That means subsequent calls to `Symbol.for()` using the same key will return the same symbol:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

In this example, `uid` and `uid2` contain the same symbol and so they can be used interchangeably. The first call to `Symbol.for()` creates the symbol and second call retrieves the symbol from the global symbol registry.

Another unique aspect of shared symbols is that you can retrieve the key associated with a symbol in the global symbol registry by using `Symbol.keyFor()`, for example:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

Notice that both `uid` and `uid2` return the key `"uid"`. The symbol `uid3` doesn’t exist in the global symbol registry, so it has no key associated with it and `Symbol.keyFor()` returns `undefined`.

<table class="warning sidebarish">

<tbody>

<tr>

<td class="sidebar-icon">![warning](/site_images/understandinges6/leanpub_warning.png)</td>

<td>

The global symbol registry is a shared environment, just like the global scope. That means you can’t make assumptions about what is or is not already present in that environment. You should use namespacing of symbol keys to reduce the likelihood of naming collisions when using third-party components. For example, jQuery might prefix all keys with `"jquery."`, such as `"jquery.element"`.

</td>

</tr>

</tbody>

</table>

### Finding Object Symbols

Similar to other properties on objects, you can access symbol properties using the `Object.getOwnPropertySymbols()` method. This method works exactly the same as `Object.getOwnPropertyNames()` except that the returned values are symbols rather than strings. Since symbols technically aren’t property names, they are omitted from the result of `Object.getOwnPropertyNames()`.

The return value of `Object.getOwnPropertySymbols()` is an array of symbols that represent own properties. For example:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

In this code, `object` has a single symbol property. The array returned from `Object.getOwnPropertySymbols()` is an array containing just that symbol.

<table class="information sidebarish">

<tbody>

<tr>

<td class="sidebar-icon">![information](/site_images/understandinges6/leanpub_info-circle.png)</td>

<td>

All objects start off with zero own symbol properties (although they do have some inherited symbol properties).

</td>

</tr>

</tbody>

</table>

### Coercing Symbols to Strings

TODO

String(symbol) works but symbol + “” throws

### Well-Known Symbols

In addition to the symbols you defined, there are some predefined symbols as well (called _well-known_ symbols in the specification). These symbols represent common behaviors in JavaScript that were previously considered internal-only operations. Each well-known symbol is represented by a property on `Symbol`, such as `Symbol.create` for the `@@create` symbol.

A central theme for both ECMAScript 5 and ECMAScript 6 was exposing and defining some of the “magic” parts of JavaScript - the parts that couldn’t be emulated by a developer. ECMAScript 6 follows this tradition by exposing even more of the previously internal-only logic of the language. It does so primarily through the use of symbol prototype properties that define the basic behavior of certain objects.

<table class="information sidebarish">

<tbody>

<tr>

<td class="sidebar-icon">![information](/site_images/understandinges6/leanpub_info-circle.png)</td>

<td>

Overwriting a method defined with a well-known symbol changes an ordinary object to an exotic object because this changes some internal default behavior.

</td>

</tr>

</tbody>

</table>

The well-known symbols are:

*   `@@hasInstance` - a method used by `instanceof` to determine an object’s inheritance.
*   `@@isConcatSpreadable` - a Boolean value indicating if use with `Array.prototype.concat()` should flatten the collection’s elements.
*   `@@iterator` - a method that returns an iterator (see Chapter 7).
*   `@@match` - a method used by `String.prototype.match()` to compare strings.
*   `@@replace` - a method used by `String.prototype.replace()` to replace substrings.
*   `@@search` - a method used by `String.prototype.search()` to locate substrings.
*   `@@species` - the constructor from which derived objects are made.
*   `@@split` - a method used by `String.prototype.split()` to split up strings.
*   `@@toPrimitive` - a method that returns a primitive value representation of the object.
*   `@@toStringTag` - a string used by `Object.prototype.toString()` to create an object description.
*   `@@unscopeables` - an object whose properties are the names of object properties that should not be included in a `with` statement.

Some of the well-known symbols are discussed below while others are discussed throughout the book to keep them in the correct context.

#### @@toStringTag

One of the most interesting problems in JavaScript has been the availability of multiple global execution environments. This occurs in web browsers when a page includes an iframe, as the page and the iframe each have their own execution environments. In most cases, this isn’t a problem, as data can be passed back and forth between the environments with little cause for concern. The problem arises when trying to identify what type of an object you’re dealing with.

The canonical example of this is passing an array from the iframe into the containing page or vice-versa. Now in a different execution environment, `instanceof Array` returns `false` because the array was created with a constructor from a different environment.

Developers soon found a good way to identify arrays. It was discovered that by calling the standard `toString()` method on the object, a predictable string was always returned. Thus, many JavaScript libraries began including a function that works similar to this:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

This may look a bit roundabout, but in reality it was found to work quite well in all browsers. The `toString()` method on arrays isn’t very useful for this purpose because it returns a string representation of the items it contains. The `toString()` method on `Object.prototype`, however, had this quirk where it included some internally-defined name in the result. By using this method on an object, you could retrieve what the JavaScript environment thought the data type was.

Developers quickly realized that since there was no way to change this behavior, it was possible to use the same approach to distinguish between native objects and those created by developers. The most important case of this was the ECMAScript 5 `JSON` object.

Prior to ECMAScript 5, many used Douglas Crockford’s `json2.js`, which created a global `JSON` object. As browsers started to implement the `JSON` global object, it became necessary to tell whether the global `JSON` was provided by the JavaScript environment itself or through some other library. Using the same technique, many created functions like this:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

Here, the same characteristic that allowed developers to identify arrays across iframe boundaries also provided a way to tell if `JSON` was the native one or not. A non-native `JSON` object would return `[object Object]` while the native version returned `[object JSON]`. From that point on, this approach became the de facto standard for identifying native objects.

ECMAScript 6 explains this behavior through the `@@toStringTag` symbol. This symbol represents a property on each object that defines what value should be produced when `Object.prototype.toString.call()` is called on it. So the value returned for arrays is explained by having the `@@toStringTag` property equal `"Array"`. Likewise, you can define that value for your own objects:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

In this example, a `@@toStringTag` property is defined on `Person.prototype` to provide the default behavior for creating a string representation. Since `Person.prototype` inherits `Object.prototype.toString()`, the value returned from `@@toStringTag` is also used when calling `me.toString()`. However, you can still define your own `toString()` that provides a different behavior without affecting the use of `Object.prototype.toString.call()`:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

This code defines `Person.prototype.toString()` to return the value of the `name` property. Since `Person` instances no longer inherit `Object.prototype.toString()`, calling `me.toString()` exhibits a different behavior.

<table class="information sidebarish">

<tbody>

<tr>

<td class="sidebar-icon">![information](/site_images/understandinges6/leanpub_info-circle.png)</td>

<td>

All objects inherit `@@toStringTag` from `Object.prototype` unless otherwise specified. This default property value is `"Object"`.

</td>

</tr>

</tbody>

</table>

There is no restriction on which values can be used for `@@toStringTag` on developer-defined objects. For example, there’s nothing preventing you from using `"Array"` as the value of `@@toStringTag`, such as:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

Here, the result of calling `Object.prototype.toString()` is `"[object Array]"`, which is the same as you would get from an actual array. This highlights the fact that `Object.prototype.toString()` is no longer a completely reliable way of identifying an object’s type.

It’s possible to change the string tag for native objects by assigning to `@@toStringTag` on their prototype. For example:

<div class="code-block">

<div class="highlight">

    Array

</div>

</div>

Even though `@@toStringTag` is overwritten for arrays in this example, the call to `Object.prototype.toString()` results in `"[object Magic]"`. While it’s recommended not to change built-in objects in this way, there’s nothing in the language that forbids it.

#### @@toPrimitive

JavaScript frequently attempts to convert objects into primitive values implicitly when certain operations are applied. For instance, when you compare a string to an object using double equals (`==`), the object is converted into a primitive value before comparing. Exactly what value should be used was previously an internal operation that is exposed in ECMAScript 6 through the `@@toPrimitive` method.

The `@@toPrimitive` method is defined on the prototype of each standard type and prescribes the exact behavior. When a primitive conversion is needed, `@@toPrimitive` is called with a single argument, referred to as `hint` in the specification. The `hint` argument is `"default"`, specifying that the operation has no preference as to the type, `"string"`, indicating a string should be returned, or `"number"`, if a number is necessary to perform the operation. Most standard objects treat `"default"` as equivalent to `"number"` (except for `Date`, which treats `"default"` as `"string"`).

TODO

#### @@isConcatSpreadable

TODO

#### @@species

TODO

#### @@unscopeables

TODO

Only applied to `with` statement object records - does not refer to other scopes.

#### @@hasInstance

TODO

### Summary

TODO

## Classes

<table class="warning sidebarish">

<tbody>

<tr>

<td class="sidebar-icon">![warning](/site_images/understandinges6/leanpub_warning.png)</td>

<td>

This chapter is a work-in-progress. As such, it may have more typos or content errors than others.

</td>

</tr>

</tbody>

</table>

Ever since JavaScript was first created, many developers have been confused by its lack of classes. Most formal object-oriented programming languages support classes and classical inheritance as the primary way of defining similar and related objects. From pre-ECMAScript 1 all the way through ECMAScript 5, this point of confusion led many libraries to create utilities designed to make JavaScript look like it had support for classes.

While there are some JavaScript developers who feel strongly that the language doesn’t need classes, the fact that so many libraries were created specifically for this purpose led to the inclusion of classes in ECMAScript 6\. However, ECMAScript 6 classes aren’t exactly the same as classes in other language. There’s a uniqueness about them that embraces the dynamic of JavaScript as a language.

### Class-Like Structures in ECMAScript 5

Before exploring classes, it’s helpful to understand the underlying mechanisms that classes use. In ECMAScript 5 and earlier, there were no classes, and the closest equivalent was creating a constructor and then assigning methods to its prototype. This approach is called creating a custom type. For example:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

In this code, `PersonType` is a constructor function that creates a single property called `name`. The `sayName()` method is assigned to the prototype so the same function is shared by all instances of `PersonType`. Then, a new instance of `PersonType` is created via the `new` operator, and the resulting `person` object is considered an instance of `PersonType` and of `Object` (through prototypal inheritance).

This same basic pattern underlies a lot of the class-mimicking JavaScript libraries. And that’s where ECMAScript 6 classes start.

### Class Declarations

The simplest form of classes to understand is the one that looks similar to other languages: the class declaration. Class declarations begin with the `class` keyword followed by the name of the class. The rest of the syntax looks similar to concise methods in object literals without requiring commas between them. For example, here’s the class equivalent of the previous example:

<div class="code-block">

<div class="highlight">

    class

</div>

</div>

The class declaration `PersonClass` behaves quite similarly to `PersonType` from the previous example. Instead of defining a function as the constructor, class declarations allow you to define the constructor directly inside of the class using the special `constructor` method name. Since class methods use the concise syntax, there’s no need to use the `function` keyword. All other method names have no special meaning, so you can add as many as you want.

<table class="information sidebarish">

<tbody>

<tr>

<td class="sidebar-icon">![information](/site_images/understandinges6/leanpub_info-circle.png)</td>

<td>

Own properties, properties that occur on the instance rather than the prototype, can only be created inside of a class constructor or method. In the previous example, `name` is an own property. It’s recommended to create all possible own properties inside of the constructor function so there’s a single place that’s responsible for all of them.

</td>

</tr>

</tbody>

</table>

Perhaps the worst-kept secret in ECMAScript 6 is that class declarations such as this example are actually just syntactic sugar on top of the existing custom type declarations. The `PersonClass` declaration actually creates a function that has the behavior of the `constructor` method, which is why `typeof PersonClass` is `"function"`. Similarly, the `sayName()` method ends up as a method on `PersonClass.prototype`, similar to `PersonType.prototype` in the earlier example. These similarities allow you to mix custom types and classes without worry too much about which you’re using.

Despite the similarities, there are some important differences to keep in mind:

1.  Class declarations, unlike function declarations, are not hoisted. Class declarations act like `let` declarations and so exist in the temporal dead zone until execution reaches the declaration.
2.  All code inside of class declarations runs in strict mode automatically. There’s no way to opt-out of strict mode inside of classes.
3.  All methods are non-enumerable. This is a significant change from custom types, where you need to use `Object.defineProperty()` to make a method non-enumerable.
4.  Calling the class constructor without `new` throws an error.

With all of this in mind, the `PersonClass` declaration from the previous example is directly equivalent to the following:

<div class="code-block">

<div class="highlight">

    // direct equivalent of PersonClass

</div>

</div>

While it was possible to do everything that classes do without adding new syntax, you can see how the class syntax makes all of the functionality a lot simpler than it would be otherwise.

### Class Expressions

Classes and functions are similar in that they have two forms: declarations and expressions. Function and class declarations begin with an appropriate keyword (`function` or `class`, respectively) followed by an identifier. Functions have an expression form that doesn’t require an identifier after `function`, and similarly, classes have an expression form that doesn’t require an identifier after `class`.

These _class expressions_ are designed to be used in variable declarations or passed into functions as arguments. Here’s the class expression equivalent of the previous examples:

<div class="code-block">

<div class="highlight">

    // class expressions do not require identifiers after "class"

</div>

</div>

Aside from the syntax, class expressions are exactly equivalent to class declarations. This example omits the identifier after `class`, but you can also include it:

<div class="code-block">

<div class="highlight">

    let

</div>

</div>

In this case, `PersonClass` and `PersonClass2` both reference the same class, and so they can be used interchangeably.

Class expressions can also be used in some interesting ways. For example, they can be passed into functions as arguments:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

In this example, an anonymous class expression is passed into `createObject()`. An instance is then created by using `new` and that object is returned.

Another interesting use of class expressions is to create singletons by immediately invoking the class constructor. To do so, you must use `new` with a class expression and include parentheses at the end. For example:

<div class="code-block">

<div class="highlight">

    let

</div>

</div>

Here, the anonymous class expression is created and then executed immediately. This pattern allows you to use the class syntax for creating singletons without leaving a class reference available for inspection. The parentheses at the end are the indicator that you’re calling a function while also allowing you to pass in an argument.

Whether you use class declarations or class expressions is purely a matter of style. Unlike function declarations and function expressions, both class declarations and class expressions are not hoisted, and so the choice has little bearing on the runtime behavior of the code.

### Accessor Properties

While own properties should be created inside of class constructors, classes allow you to define accessor properties on the prototype by using a syntax similar to that of object literal accessor format. To create a getter, use the keyword `get` followed by a space followed by an identifier; to create a setter, do the same using the keyword `set`. For example:

<div class="code-block">

<div class="highlight">

    class

</div>

</div>

In this example, the `CustomHTMLElement` class is made as a simple wrapper around an existing DOM element. It has both a getter and setter for `html` that simply delegates to the `innerHTML` method on the element itself. This accessor property is created as non-enumerable, just like any other method would be, and is created on the `CustomHTMLElement.prototype`. The equivalent non-class representation is:

<div class="code-block">

<div class="highlight">

    // direct equivalent to previous example

</div>

</div>

As with previous examples, this one shows just how much code you’re saving by using a class instead of the non-class equivalent. The accessor property definition alone is almost the size of the equivalent class declaration.

### Static Members

Another common pattern in JavaScript is adding addition methods directly onto constructors to simulate static members. For example:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

This code creates a factory method called `PersonType.create()`. In other programming languages, this would be considered a static method as it is not dependent on an instance of `PersonType` for its data.

Classes simplify the creation of static members by using the formal `static` annotation before the method or accessor property name. Here’s the equivalent of the last example:

<div class="code-block">

<div class="highlight">

    class

</div>

</div>

The `PersonClass` definition defines a single static method called `create()` by adding the `static` keyword.

You can use the `static` keyword on any method or accessor property definition within a class. The only restriction is that you cannot use `static` with the `constructor` method definition.

### Derived Classes

It’s an error to try to subclass a generator function using a class declaration or class expression.

class extends null {} is a derived class

super() throws error in non-derived class constructors

new.target

TODO

### Summary

TODO

## Iterators and Generators

Iterators have been used in many programming languages as a way to more easily work with collections of data. In ECMAScript 6, JavaScript adds iterators as an important feature of the language. When coupled with new array methods and new types of collections (such as sets and maps), iterators become even more important for efficient processing of data.

### What are Iterators?

Iterators are nothing more than objects with a certain interface. That interface consists of a method called `next()` that returns a result object. The result object has two properties, `value`, which is the next value, and `done`, which is a boolean value that’s `true` when there are no more values to return. The iterator keeps an internal pointer to a location within a collection of values and, with each call to `next()`, returns the next appropriate value.

If you call `next()` after the last value has been returned, the method returns `done` as `true` and `value` contains the return value for the iterator. The _return value_ is not considered part of the data set, but rather a final piece of related data or `undefined` if no such data exists. (This concept will become clearer in the generators section later in this chapter.)

With that understanding, it’s fairly easy to create an iterator using ECMAScript 5, for example:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

The `createIterator()` function in this example returns an object with a `next()` method. Each time the method is called, the next value in the `items` array is returned as `value`. When `i` is 4, `items[i++]` returns `undefined` and `done` is `true`, which fulfills the special last case for iterators in ECMAScript 6.

ECMAScript 6 makes use of iterators in a number of places to make dealing with collections of data easier, so having a good basic understanding allows you to better understand the language as a whole.

### Generators

You might be thinking that iterators sound interesting but they look like a bunch of work. Indeed, writing iterators so that they adhere to the correct behavior is a bit difficult, which is why ECMAScript 6 provides generators. A _generator_ is a special kind of function that returns an iterator. Generator functions are indicated by inserting a star character (`*`) after the `function` keyword (it doesn’t matter if the star is directly next to `function` or if there’s some whitespace between them). The `yield` keyword is used inside of generators to specify the values that the iterator should return when `next()` is called. So if you want to return three different values for each successive call to `next()`, you can do so as follows:

<div class="code-block">

<div class="highlight">

    // generator

</div>

</div>

This code outputs the following:

<div class="code-block">

<div class="highlight">

    1

</div>

</div>

In this example, the `createIterator()` function is a generator (as indicated by the `*` before the name) and it’s called like any other function. The value returned is an object that adheres to the iterator pattern. Multiple `yield` statements inside the generator indicate the progression of values that should be returned when `next()` is called on the iterator. First, `next()` should return `1`, then `2`, and then `3` before the iterator is finished.

Perhaps the most interesting aspect of generator functions is that they stop execution after each `yield` statement, so `yield 1` executes and then the function doesn’t execute anything else until the iterator’s `next()` method is called. At that point, execution resumes with the next statement after `yield 1`, which in this case is `yield 2`. This ability to stop execution in the middle of a function is extremely powerful and lends to some interesting uses of generator functions (discussed later in this chapter).

The `yield` keyword can be used with any value or expression, so you can do interesting things like use `yield` inside of a `for` loop:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

In this example, an array is used in a `for` loop, yielding each item as the loop progresses. Each time `yield` is encountered, the loop stops, and each time `next()` is called on `iterator`, the loop picks back up where it left off.

Generator functions are an important part of ECMAScript 6, and since they are just functions, they can be used in all the same places.

#### Generator Function Expressions

Generators can be created using function expressions in the same way as using function declarations by including a star (`*`) character between the `function` keyword and the opening paren, for example:

<div class="code-block">

<div class="highlight">

    let

</div>

</div>

In this code, `createIterator()` is created by using a generator function expression. This behaves exactly the same as the example in the previous section.

#### Generator Object Methods

Because generators are just functions, they can be added to objects the same way as any other functions. For example, you can use an ECMAScript 5-style object literal with a function expression:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

You can also use the ECMAScript 6 method shorthand by prepending the method name with a star (`*`):

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

This example is functionally equivalent to the previous one, the only difference is the syntax used.

#### Generator Class Methods

Similar to objects, you can add generator methods directly to classes using almost the same syntax:

<div class="code-block">

<div class="highlight">

    class

</div>

</div>

The syntax is very similar to using shorthand object literal methods, as the asterisk needs to come before the method name.

### Iterables and for-of

Closely related to the concept of an iterator is an iterable. An _iterable_ is an object that has a default iterator specified using the `@@iterator` symbol. More specifically, `@@iterator` contains a function that returns an iterator for the given object. All of the collection objects, including arrays, sets, and maps, as well as strings, are iterables and so have a default iterator specified. Iterables are designed to be used with a new addition to ECMAScript: the `for-of` loop.

The `for-of` loop is similar to the other loops in ECMAScript except that it is designed to work with iterables. The loop itself calls `next()` behind the scenes and exits when the `done` property of the returned object is `true`. For example:

<div class="code-block">

<div class="highlight">

    let

</div>

</div>

This code outputs the following:

<div class="code-block">

<div class="highlight">

    1

</div>

</div>

The `for-of` loop in this example is first calling the `@@iterator` method to retrieve an iterator, and then calling `iterator.next()` and assigning the variable `i` to the value returned on the `value` property. So `i` is first 1, then 2, and finally 3\. When `done` is `true`, the loop exits, so `i` is never assigned the value of `undefined`.

<table class="warning sidebarish">

<tbody>

<tr>

<td class="sidebar-icon">![warning](/site_images/understandinges6/leanpub_warning.png)</td>

<td>

The `for-of` statement will throw an error when used on, a non-iterable, `null`, or `undefined`.

</td>

</tr>

</tbody>

</table>

#### Accessing the Default Iterator

You can access the default iterator for an object using `Symbol.iterator`, for example:

<div class="code-block">

<div class="highlight">

    let

</div>

</div>

This code gets the default iterator for `values` and uses that to iterate over the values in the array. Knowing that `Symbol.iterator` specifies the default iterator, it’s possible to detect if an object is iterable by using the following:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

The `isIterable()` function simply checks to see if a default iterator exists on the object and is a function. This is similar to the check that the `for-of` loop does before executing.

#### Creating Iterables

Developer-defined objects are not iterable by default, but you can make them iterable by using the `@@iterator` symbol. For example:

<div class="code-block">

<div class="highlight">

    let

</div>

</div>

This code defines a default iterator for a variable called `collection` using object literal method shorthand and a computed property using `Symbol.iterator`. The generator then delegates to the `values()` iterator of `this.items`. The `for-of` loop then uses the generator to create an iterator and execute the loop.

You can also define a default iterator using classes, such as:

<div class="code-block">

<div class="highlight">

    class

</div>

</div>

This example mirrors the previous one with the exception that a class is used instead of an object literal.

Default iterators can be added to any object by assigning a generator to `Symbol.iterator`. It doesn’t matter if the property is an own or prototype property, as `for-of` normal prototype chain lookup applies.

### Built-in Iterators

Another way that ECMAScript 6 makes using iterators easier is by making iterators available on many objects by default. You don’t actually need to create your own iterators for many of the built-in types because the language has them already. You only need to create iterators when you find that the built-in ones don’t serve your purpose.

#### Collection Iterators

The ECMAScript 6 collection objects, arrays, maps, and sets, all have three default iterators to help you navigate data. You can retrieve an iterator for a collection by calling one of these methods:

*   `entries()` - returns an iterator whose values are a key-value pair.
*   `values()` - returns an iterator whose values are the values of the collection.
*   `keys()` - returns an iterator whose values are the keys contained in the collection.

The `entries()` iterator actually returns a two-item array where the first item is the key and the second item is the value. For arrays, the first item is the numeric index; for sets, the first item is also the value (since values double as keys in sets). Here are some examples:

<div class="code-block">

<div class="highlight">

    let

</div>

</div>

This example outputs the following:

<div class="code-block">

<div class="highlight">

    [0, "red"]

</div>

</div>

The `values()` iterator simply returns the values as they are stored in the collection. For example:

<div class="code-block">

<div class="highlight">

    let

</div>

</div>

This example outputs the following:

<div class="code-block">

<div class="highlight">

    "red"

</div>

</div>

In this case, using `values()` returns the exact data contained in the `value` property returned from `next()`.

The `keys()` iterator returns each key present in the collection. For arrays, this is the numeric keys only (it never returns other own properties of the array); for sets, the keys are the same as the values and so `keys()` and `values()` return the same iterator.

<div class="code-block">

<div class="highlight">

    let

</div>

</div>

This example outputs the following:

<div class="code-block">

<div class="highlight">

    0

</div>

</div>

Additionally, each collection type has a default iterator that is used by `for-of` whenever an iterator isn’t explicitly specified. The default iterator for arrays and sets is `values()` while the default iterator for maps is `entries()`. This makes it a little bit easier to use collection objects in `for-of`:

<div class="code-block">

<div class="highlight">

    let

</div>

</div>

This example outputs the following:

<div class="code-block">

<div class="highlight">

    "red"

</div>

</div>

#### String Iterators

Beginning with ECMAScript 5, JavaScript strings have slowly been evolving to be more array-like. ECMAScript 5 formalizes bracket notation for access characters (`text[0]` to get the first character). Unfortunately, bracket notation works on code units rather than characters, so it cannot be used to access double-byte characters correctly. ECMAScript 6 has added a lot of functionality to fully support Unicode (see Chapter 1) and as such, the default iterator for strings works on characters rather than code units.

Using bracket notation and the `length` property, the code units are used instead of characters and the output is a bit unexpected:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

This code outputs the following:

<div class="code-block">

<div class="highlight">

    A

</div>

</div>

Since the double-byte character is treated as two separate code units, there are four empty lines between `A` and `B` in the output.

Using the default string iterator with a `for-of` loop results in a more appropriate result:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

This code outputs the following:

<div class="code-block">

<div class="highlight">

    A

</div>

</div>

This output is more in line with what you might expect when working with characters. The default string iterator is ECMAScript 6’s attempt at solving the iteration problem by using characters instead of code units.

#### NodeList Iterators

In the Document Object Model (DOM), there is a `NodeList` type that represents a collection of elements in a document. For those who write JavaScript to run in web browsers, understanding the difference between `NodeList` objects and arrays has always been a bit difficult. Both use the `length` property to indicate the number of items and both use bracket notation to access individual items. However, internally a `NodeList` and an array behave quite differently, and so that has led to a lot of confusion.

With the addition of default iterators in ECMAScript 6, the DOM definition of `NodeList` now specifically includes a default iterator that behaves in the same manner as the array default iterator. That means you can use `NodeList` in a `for-of` loop or any other place that uses an object’s default iterator. For example:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

This code uses `getElementsByTagName()` method to retrieve a `NodeList` that represents all of the `<div>` elements in the document. The `for-of` loop then iterates over each element and outputs its ID, effectively making the code the same as it would be for a standard array.

### Advanced Functionality

There’s a lot that can be accomplished with the basic functionality of iterators and the convenience of creating them using generators. However, developers have discovered that iterators are much more powerful when used for tasks other than simply iterating over a collection of values. During the development of ECMAScript 6, a lot of unique ideas and patterns emerged that caused the addition of more functionality. Some of the changes are subtle, but when used together, can accomplish some interesting interactions.

#### Passing Arguments to Iterators

Throughout this chapter, you’ve seen that iterators can pass values out via the `next()` method or by using `yield` in a generator. It’s also possible to pass arguments into the iterator through the `next()` method. When an argument is passed to `next()`, it becomes the value of the `yield` statement inside a generator. For example:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

The first call to `next()` is a special case where any argument passed to it is lost. Since arguments passed to `next()` become the value returned by `yield`, there would have to be a way to access that argument before the first `yield` in the generator function. That’s not possible, so there’s no reason to pass an argument the first time `next()` is called.

On the second call to `next()`, the value `4` is passed as the argument. The `4` ends up assigned to the variable `first` inside the generator function. In a `yield` statement including an assignment the right side of the expression is evaluated on the first call to `next()` and the left side is evaluated on the second call to `next()` before the function continues executing. Since the second call to `next()` passes in `4`, that value is assigned to `first` and then execution continues.

The second `yield` uses the result of the first `yield` and adds two, which means it returns a value of six. When `next()` is called a third time, the value `5` is passed as an argument. That value is assigned to the variable `second` and then used in the third `yield` statement to return eight.

It’s a bit easier to think about what’s happening by considering which code is executing each time execution continues inside the generator function. Figure 6-1 uses colors to show the code being executed before yielding.

<div class="image-with-caption center image-with-caption center">![Figure 6-1: Code execution inside a generator](/site_images/understandinges6/fg0601.png)

Figure 6-1: Code execution inside a generator

</div>

The color yellow represents the first call to `next()` and all of the code that is executed inside of the generator as a result; the color aqua represents the call to `next(4)` and the code that is executed; the color purple represents the call to `next(5)` and the code that is executed as a result. The tricky part is the code on the right side of each expression executing and stopping before the left side is executed. This makes debugging complicated generators a bit more involved than regular functions.

#### Throwing Errors in Iterators

It’s not only possible to pass data into iterators, it’s also possible to pass error conditions. Iterators can choose to implement a `throw()` method that instructs the iterator to throw an error when it resumes. You can pass in an error object that should be thrown when the iterator continues processing. For example:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

In this example, the first two `yield` expressions are evaluated as normal, but when `throw()` is called, an error is thrown before `let second` is evaluated. This effectively halts code execution similar to directly throwing an error. The only difference is the location in which the error is thrown. Figure 6-2 shows which code is executed at each step.

<div class="image-with-caption center image-with-caption center">![Figure 6-2: Throwing an error inside a generator](/site_images/understandinges6/fg0602.png)

Figure 6-2: Throwing an error inside a generator

</div>

In this figure, the color red represents the code executed when `throw()` is called and the red star shows approximately when the error is thrown inside the generator. The first two `yield` statements are evaluated fine, it’s only when `throw()` is called that an error is thrown before any other code is executed. Knowing this, it’s possible to catch such errors inside the generator using a `try-catch` block, such as:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

In this example, a `try-catch` block is wrapped around the second `yield` statement. While this `yield` executes without error, the error is thrown before any value can be assigned to `second`, so the `catch` block assigns it a value of six. Execution then flows to the next `yield` and returns nine.

You’ll also notice something interesting happened - the `throw()` method returned a value similar to that returned by `next()`. Because the error was caught inside the generator, code execution continued on to the next `yield` and returned the appropriate value.

It helps to think of `next()` and `throw()` as both being instructions to the iterator: `next()` instructs the iterator to continue executing (possibly with a given value) and `throw()` instructs the iterator to continue executing by throwing an error. What happens after that point depends on the code inside the generator.

#### Generator Return Statements

Since generators are functions, you can use the `return` statement both to exit early and to specify a return value for the last call to `next()`. For most of this chapter you’ve seen examples where the last call to `next()` on an iterator returns `undefined`. It’s possible to specify an alternate value by using `return` as you would in any other function. In a generator, `return` indicates that all processing is done, so the `done` property is set to `true` and the value, if provided, becomes the `value` field. Here’s an example that simply exits early using `return`:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

In this code, the generator has a `yield` statement followed by a `return` statement. The `return` indicates that there are no more values to come and so the rest of the `yield` statements will not execute (they are unreachable).

You can also specify a return value that will end up in the `value` field of the returned object. For example:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

Here, the value `42` is returned in the `value` field on the second call to `next()` (which is the first time that `done` is `true`). The third call to `next()` returns an object whose `value` property is once again `undefined`. Any value you specify with `return` is only available on the returned object one time before the `value` field is reset to `undefined`.

<table class="information sidebarish">

<tbody>

<tr>

<td class="sidebar-icon">![information](/site_images/understandinges6/leanpub_info-circle.png)</td>

<td>

Any value specified by `return` is ignored by `for-of`.

</td>

</tr>

</tbody>

</table>

#### Delegating Generators

In some cases it may be useful to combine the values from two iterators into one. Using generators, it’s possible to delegate to another generator using a special form of `yield` with a star (`*`). As with generator definitions, it doesn’t matter where the star appears so as long as it is between the keyword `yield` and the generator function name. Here’s an example:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

In this example, the `createCombinedIterator()` generator delegates first to `createNumberIterator()` and then to `createColorIterator()`. The returned iterator appears, from the outside, to be one consistent iterator that has produced all of the values. Each call to `next()` is delegated to the appropriate iterator until they are empty, and then the final `yield` is executed to return `true`.

Generator delegation also lets you use make of generator return values (as seen in the previous section). This is the easiest way to access such returned values and can be quite useful in performing complex tasks. For example:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

Here, the `createCombinedIterator()` generator delegates to `createNumberIterator()` and assigns the return value to `result`. Since `createNumberIterator()` contains `return 3`, the returned value is `3`. The `result` variable is then passed to `createRepeatingIterator()` as an argument indicating how many times to yield the same string (in this case, three times).

Notice that the value `3` was never output from any call to `next()`, it existed solely inside of `createCombinedIterator()`. It is possible to output that value as well by adding another `yield` statement, such as:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

In this code, the extra `yield` statement explicitly outputs the returned value from `createNumberIterator()`.

Generator delegation using the return value is a very powerful paradigm that allows for some very interesting possibilities, especially when used in conjunction with asynchronous operations.

<table class="information sidebarish">

<tbody>

<tr>

<td class="sidebar-icon">![information](/site_images/understandinges6/leanpub_info-circle.png)</td>

<td>

You can use `yield *` directly on strings, such as `yield * "hello"` and the string’s default iterator will be used.

</td>

</tr>

</tbody>

</table>

#### Asynchronous Task Scheduling

A lot of the excitement around generators is directly related to usage with asynchronous programming. Asynchronous programming in JavaScript is a double-edged sword: it’s very easy to do simple things while complex things become an errand in code organization. Since generators allow you to effectively pause code in the middle of execution, this opens up a lot of possibilities as it relates to asynchronous processing.

The traditional way to perform asynchronous operations is to call a function that has a callback. For example, consider reading a file from disk in Node.js:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

Instead of providing a callback, you can `yield` and just wait for a response before starting again:

<div class="code-block">

<div class="highlight">

    var

</div>

</div>

The difference between `init()` in this example and the previous one is why developers are excited about generators for asynchronous operation. Instead of using callbacks, `init()` yields to `readConfigFile()`, which does the asynchronous read operation and, when complete, either calls `throw()` if there’s an error or `next()` if the contents have been ready. That means the `yield` operation inside of `init()` will throw an error if there’s a read error or else the file contents will be returned almost as if the operation was synchronous.

Managing the `task` variable is a bit cumbersome in this example, but it’s only important that you understand the theory. There are more powerful ways of doing asynchronous task scheduling using promises, and that will be covered further in Chapter 10.

### Summary

Iterators are an important part of ECMAScript 6 and are at the root of several important parts of the language. On the surface, iterators provide a simple way to return a sequence of values using a simple API. However, there are far more complex ways to use iterators in ECMAScript 6.

The `@@iterator` symbol is used to define default iterators for objects. Both built-in objects and developer-defined objects can use this symbol to provide a method that returns an iterator. When `@@iterator` is provided, the object is considered an iterable.

The `for-of` loop uses iterables to return a series of values in a loop. This makes creating loops easier than the traditional `for` loop because you no longer need to track values and control when the loop ends. The `for-of` loop automatically reads all values from the iterator until there are no more and then exits.

To make it easier to use `for-of`, many values in ECMAScript 6 have default iterators. All the collection types, arrays, maps, and sets, have iterators designed for easy access to their contents. Strings also have a default iterator so it’s easy to iterate over the code points of the string (rather than the code units).

Generators are a special type of function that automatically creates an iterator when called. These functions are indicated by the start (`*`) and make use of the `yield` keyword to indicate which value to return for each successive call to `next()`.

Generator delegation encourages good encapsulation of iterator behavior by letting you reuse existing generators in new ones. This is done using `yield *` instead of `yield`, allowing you to create an iterator that returns values from multiple iterators.

Perhaps the most interesting and exciting aspect of generators and iterators is the possibility of creating cleaner-looking asynchronous code. Instead of needing to use callbacks everywhere, you can setup code that looks synchronous but in fact uses `yield` to wait for asynchronous operations to complete.

## Template Strings

JavaScript’s strings have been fairly limited when compared to those in other languages. Template strings add new syntax to allow the creation of domain-specific languages (DSLs) for working with content in a way that is safer than the solutions we have today. The description on the template string strawman was as follows:

> This scheme extends ECMAScript syntax with syntactic sugar to allow libraries to provide DSLs that easily produce, query, and manipulate content from other languages that are immune or resistant to injection attacks such as XSS, SQL Injection, etc.

In reality, though, template strings are ECMAScript 6’s answer to several ongoing problems in JavaScript:

*   **Multiline strings** - JavaScript has never had a formal concept of multiline strings.
*   **Basic string formatting** - The ability to substitute parts of the string for values contained in variables.
*   **HTML escaping** - The ability to transform a string such that it is safe to insert into HTML.

Rather than trying to add more functionality to JavaScript’s already-existing strings, template strings represent an entirely new approach to solving these problems.

### Basic Syntax

At their simplest, template strings act like regular strings that are delimited by backticks (```) instead of double or single quotes. For example:

<div class="code-block">

<div class="highlight">

    let

</div>

</div>

This code demonstrates that the variable `message` contains a normal JavaScript string. The template string syntax only is used to create the string value, which is then assigned to `message`.

If you want to use a backtick in your string, then you need only escape it by using a backslash (`\`):

<div class="code-block">

<div class="highlight">

    let

</div>

</div>

There’s no need to escape either double or single quotes inside of template strings.

### Multiline Strings

Ever since the first version of JavaScript, developers have longed for a way to create multiline strings in JavaScript. When using double or single quotes, strings must be completely contained on a single line. JavaScript has long had a syntax bug that would allow multiline strings by using a backslash (`\`) before a newline, such as:

<div class="code-block">

<div class="highlight">

    let

</div>

</div>

Despite this working in all major JavaScript engines, the behavior was defined as a bug and many recommended avoiding its usage.

Other attempts to create multiline strings usually relied on arrays or string concatenation, such as:

<div class="code-block">

<div class="highlight">

    let

</div>

</div>

All of the ways developers worked around JavaScript’s lack of multiline strings left something to be desired.

Template strings make multiline strings easy because there is no special syntax. Just include a newline where you want and it shows up in the result. For example:

<div class="code-block">

<div class="highlight">

    let

</div>

</div>

All whitespace inside of the backticks is considered to be part of the string, so be careful with indentation. For example:

<div class="code-block">

<div class="highlight">

    let

</div>

</div>

In this code, all of the whitespace before the second line of the template string is considered to be a part of the string itself. If making the text line up with proper indentation is important to you, then you consider leaving nothing on the first line of a multiline template string and then indenting after that, such as this:

<div class="code-block">

<div class="highlight">

    let

</div>

</div>

This code begins the template string on the first line but doesn’t have any text until the second. The HTML tags are indented to look correct and then the `trim()` method is called to remove the initial (empty) line.

<div class="aside sidebarish">

If you prefer, you can also use `\n` in a template string to indicate where a newline should be inserted:

<div class="code-block">

<div class="highlight">

    let

</div>

</div>

</div>

### Substitutions

To this point, template strings may look like a fancier way of defining normal JavaScript strings. The real difference is with template string substitutions. Substitutions allow you to embed any valid JavaScript expression inside of a template string and have the result be output as part of the string.

Substitutions are delimited by an opening `${` and a closing `}`, within which you can use any JavaScript expression. At its simplest, substitutions let you embed local variables directly into the result string, like this:

<div class="code-block">

<div class="highlight">

    let

</div>

</div>

The substitution `${name}` accessed the local variable `name` to insert it into the string. The `message` variable then holds the result of the substitution immediately.

<table class="information sidebarish">

<tbody>

<tr>

<td class="sidebar-icon">![information](/site_images/understandinges6/leanpub_info-circle.png)</td>

<td>

Template strings can access any variable that is accessible in the scope in which it is defined. Attempting to use an undeclared variable in a template string results in an error being thrown in both strict and non-strict modes.

</td>

</tr>

</tbody>

</table>

Since all substitutions are JavaScript expressions, it’s possible to substitute more than just simple variable names. You can easily embed calculations, function calls, and more. For example:

<div class="code-block">

<div class="highlight">

    let

</div>

</div>

This code performs a calculation as part of the template string. The variables `count` and `price` are multiplied together to get a result, and then formatted to two decimal places using `.toFixed()`. The dollar sign before the second substitution is output as-is because it’s not followed by an opening curly brace.

### Tagged Templates

To this point, you’ve seen how template strings can be used for multiline strings and to insert values into strings without using concatenation. The real power of template strings comes from tagged templates. A _template tag_ performs a transformation on the template string and returns the final string value. This tag is specified at the start of the template, just before the first ``` character, such as:

<div class="code-block">

<div class="highlight">

    let

</div>

</div>

In this example, `tag` is the template tag to apply to ``Hello world``.

#### Defining Tags

A tag is simply a function that is called with the processed template string data. The function receives data about the template string as individual pieces that the tag must then combined to create the finished value. The first argument is an array containing the literal strings as they are interpreted by JavaScript. Each subsequent argument is the interpreted value of each substitution. Tag functions are typically defined using rest arguments to make dealing with the data easier:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

To better understand what is passed to tags, consider the following:

<div class="code-block">

<div class="highlight">

    let

</div>

</div>

If you had a function called `passthru()`, that function would receive three arguments:

1.  `literals`, containing:
    *   `""` - the empty string before the first substitution
    *   `" items cost $"` - the string after the first substitution and before the second
    *   `"."` - the string after the second substitution
2.  `10` - the interpreted value for `count` (this becomes `substitutions[0]`)
3.  `"2.50"` - the interpreted value for `(count * price).toFixed(2)` (this becomes `substitutions[1]`)

Note that the first item in `literals` is an empty string. This is to ensure that `literals[0]` is always the start of the string, just like `literals[literals.length - 1]` is always the end of the string. There is always one fewer substitution than literal, which is to say that `substitutions.length === literals.length - 1` all the time.

Using this pattern, the `literals` and `substitutions` arrays can be interweaved to create the result. The first item in `literals` comes first, then the first item in `substitutions`, and so on, until the string has been completed. So to mimic the default behavior of template, you need only define a function that performs this operation:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

This example defines a `passthru` tag that performs the same transformation as the default template string behavior. The only trick is to use `substitutions.length` for the loop rather than `literals.length` to avoid accidentally going past the end of `substitutions`. This works because the relationship between `literals` and `substitutions` is well-defined.

<table class="information sidebarish">

<tbody>

<tr>

<td class="sidebar-icon">![information](/site_images/understandinges6/leanpub_info-circle.png)</td>

<td>

The values contained in `substitutions` are not necessarily strings. If an expression is evaluated to be a number, as in the previous example, then the numeric value is passed in. It’s part of the tag’s job to determine how such values should be output in the result.

</td>

</tr>

</tbody>

</table>

#### Using Raw Values

Template tags also have access to raw string information, which primarily means access to character escapes before they are transformed into their character equivalents. The simplest way to work with raw string values is to the built-in `String.raw()` tag. For example:

<div class="code-block">

<div class="highlight">

    let

</div>

</div>

In this code, the `\n` in `message1` is interpreted as a newline while the `\n` in `message2` is returned in its raw form of `"\\n"` (two characters, the slash and `n`). Retrieving the raw string information in this way allows for more complex processing (when necessary).

The raw string information is also passed into template tags. The first argument in a tag function is an array with an extra property called `raw`. The `raw` property is an array containing the raw equivalent of each literal value. So the value in `literals[0]` always has an equivalent `literals.raw[0]` that contains the raw string information. Knowing that, it’s possible to mimic `String.raw()` using the following:

<div class="code-block">

<div class="highlight">

    function

</div>

</div>

This example uses `literals.raw` instead of `literals` to output the string result. That means any character escapes, including Unicode code point escapes, will be returned in their raw form.

### Summary

Template strings are an important addition to ECMAScript 6 that allows the creating of domain-specific languages (DSLs) to make creating strings easier. The ability to embed variables directly into template strings means that developers have a safer tool than string concatenation for composing long strings with variables.

Built-in support for multiline strings also makes template strings a useful upgrade over normal JavaScript strings, which have never had this ability. Despite allowing newlines directly inside the template string, you can still use `\n` and other character escape sequences.

Template tags are the most important part of this feature for creating DSLs. Tags are functions that receive the pieces of the template string as arguments. You can then use that data to return an appropriate string value. The data provided includes literals, their raw equivalents, and any substitution values. These pieces of information can then be used to determine the correct output for the tag.

ECMAScript 6 has only one built-in tag, which is `String.raw()`. This tag simply returns the template string in its raw form, with character escape sequences in their original form rather than transforming them into their character equivalents.

</div>
